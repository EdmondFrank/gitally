// Code generated by protoc-gen-go. DO NOT EDIT.
// source: conflicts.proto

package gitalypb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ListConflictFilesRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	OurCommitOid         string      `protobuf:"bytes,2,opt,name=our_commit_oid,json=ourCommitOid,proto3" json:"our_commit_oid,omitempty"`
	TheirCommitOid       string      `protobuf:"bytes,3,opt,name=their_commit_oid,json=theirCommitOid,proto3" json:"their_commit_oid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ListConflictFilesRequest) Reset()         { *m = ListConflictFilesRequest{} }
func (m *ListConflictFilesRequest) String() string { return proto.CompactTextString(m) }
func (*ListConflictFilesRequest) ProtoMessage()    {}
func (*ListConflictFilesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_28fc8937e7d75862, []int{0}
}

func (m *ListConflictFilesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListConflictFilesRequest.Unmarshal(m, b)
}
func (m *ListConflictFilesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListConflictFilesRequest.Marshal(b, m, deterministic)
}
func (m *ListConflictFilesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListConflictFilesRequest.Merge(m, src)
}
func (m *ListConflictFilesRequest) XXX_Size() int {
	return xxx_messageInfo_ListConflictFilesRequest.Size(m)
}
func (m *ListConflictFilesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListConflictFilesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListConflictFilesRequest proto.InternalMessageInfo

func (m *ListConflictFilesRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *ListConflictFilesRequest) GetOurCommitOid() string {
	if m != nil {
		return m.OurCommitOid
	}
	return ""
}

func (m *ListConflictFilesRequest) GetTheirCommitOid() string {
	if m != nil {
		return m.TheirCommitOid
	}
	return ""
}

type ConflictFileHeader struct {
	CommitOid            string   `protobuf:"bytes,2,opt,name=commit_oid,json=commitOid,proto3" json:"commit_oid,omitempty"`
	TheirPath            []byte   `protobuf:"bytes,3,opt,name=their_path,json=theirPath,proto3" json:"their_path,omitempty"`
	OurPath              []byte   `protobuf:"bytes,4,opt,name=our_path,json=ourPath,proto3" json:"our_path,omitempty"`
	OurMode              int32    `protobuf:"varint,5,opt,name=our_mode,json=ourMode,proto3" json:"our_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConflictFileHeader) Reset()         { *m = ConflictFileHeader{} }
func (m *ConflictFileHeader) String() string { return proto.CompactTextString(m) }
func (*ConflictFileHeader) ProtoMessage()    {}
func (*ConflictFileHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_28fc8937e7d75862, []int{1}
}

func (m *ConflictFileHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConflictFileHeader.Unmarshal(m, b)
}
func (m *ConflictFileHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConflictFileHeader.Marshal(b, m, deterministic)
}
func (m *ConflictFileHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConflictFileHeader.Merge(m, src)
}
func (m *ConflictFileHeader) XXX_Size() int {
	return xxx_messageInfo_ConflictFileHeader.Size(m)
}
func (m *ConflictFileHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_ConflictFileHeader.DiscardUnknown(m)
}

var xxx_messageInfo_ConflictFileHeader proto.InternalMessageInfo

func (m *ConflictFileHeader) GetCommitOid() string {
	if m != nil {
		return m.CommitOid
	}
	return ""
}

func (m *ConflictFileHeader) GetTheirPath() []byte {
	if m != nil {
		return m.TheirPath
	}
	return nil
}

func (m *ConflictFileHeader) GetOurPath() []byte {
	if m != nil {
		return m.OurPath
	}
	return nil
}

func (m *ConflictFileHeader) GetOurMode() int32 {
	if m != nil {
		return m.OurMode
	}
	return 0
}

type ConflictFile struct {
	// Types that are valid to be assigned to ConflictFilePayload:
	//	*ConflictFile_Header
	//	*ConflictFile_Content
	ConflictFilePayload  isConflictFile_ConflictFilePayload `protobuf_oneof:"conflict_file_payload"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *ConflictFile) Reset()         { *m = ConflictFile{} }
func (m *ConflictFile) String() string { return proto.CompactTextString(m) }
func (*ConflictFile) ProtoMessage()    {}
func (*ConflictFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_28fc8937e7d75862, []int{2}
}

func (m *ConflictFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConflictFile.Unmarshal(m, b)
}
func (m *ConflictFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConflictFile.Marshal(b, m, deterministic)
}
func (m *ConflictFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConflictFile.Merge(m, src)
}
func (m *ConflictFile) XXX_Size() int {
	return xxx_messageInfo_ConflictFile.Size(m)
}
func (m *ConflictFile) XXX_DiscardUnknown() {
	xxx_messageInfo_ConflictFile.DiscardUnknown(m)
}

var xxx_messageInfo_ConflictFile proto.InternalMessageInfo

type isConflictFile_ConflictFilePayload interface {
	isConflictFile_ConflictFilePayload()
}

type ConflictFile_Header struct {
	Header *ConflictFileHeader `protobuf:"bytes,1,opt,name=header,proto3,oneof"`
}

type ConflictFile_Content struct {
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3,oneof"`
}

func (*ConflictFile_Header) isConflictFile_ConflictFilePayload() {}

func (*ConflictFile_Content) isConflictFile_ConflictFilePayload() {}

func (m *ConflictFile) GetConflictFilePayload() isConflictFile_ConflictFilePayload {
	if m != nil {
		return m.ConflictFilePayload
	}
	return nil
}

func (m *ConflictFile) GetHeader() *ConflictFileHeader {
	if x, ok := m.GetConflictFilePayload().(*ConflictFile_Header); ok {
		return x.Header
	}
	return nil
}

func (m *ConflictFile) GetContent() []byte {
	if x, ok := m.GetConflictFilePayload().(*ConflictFile_Content); ok {
		return x.Content
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ConflictFile) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ConflictFile_Header)(nil),
		(*ConflictFile_Content)(nil),
	}
}

type ListConflictFilesResponse struct {
	Files                []*ConflictFile `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListConflictFilesResponse) Reset()         { *m = ListConflictFilesResponse{} }
func (m *ListConflictFilesResponse) String() string { return proto.CompactTextString(m) }
func (*ListConflictFilesResponse) ProtoMessage()    {}
func (*ListConflictFilesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_28fc8937e7d75862, []int{3}
}

func (m *ListConflictFilesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListConflictFilesResponse.Unmarshal(m, b)
}
func (m *ListConflictFilesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListConflictFilesResponse.Marshal(b, m, deterministic)
}
func (m *ListConflictFilesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListConflictFilesResponse.Merge(m, src)
}
func (m *ListConflictFilesResponse) XXX_Size() int {
	return xxx_messageInfo_ListConflictFilesResponse.Size(m)
}
func (m *ListConflictFilesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListConflictFilesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListConflictFilesResponse proto.InternalMessageInfo

func (m *ListConflictFilesResponse) GetFiles() []*ConflictFile {
	if m != nil {
		return m.Files
	}
	return nil
}

type ResolveConflictsRequestHeader struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	OurCommitOid         string      `protobuf:"bytes,2,opt,name=our_commit_oid,json=ourCommitOid,proto3" json:"our_commit_oid,omitempty"`
	TargetRepository     *Repository `protobuf:"bytes,3,opt,name=target_repository,json=targetRepository,proto3" json:"target_repository,omitempty"`
	TheirCommitOid       string      `protobuf:"bytes,4,opt,name=their_commit_oid,json=theirCommitOid,proto3" json:"their_commit_oid,omitempty"`
	SourceBranch         []byte      `protobuf:"bytes,5,opt,name=source_branch,json=sourceBranch,proto3" json:"source_branch,omitempty"`
	TargetBranch         []byte      `protobuf:"bytes,6,opt,name=target_branch,json=targetBranch,proto3" json:"target_branch,omitempty"`
	CommitMessage        []byte      `protobuf:"bytes,7,opt,name=commit_message,json=commitMessage,proto3" json:"commit_message,omitempty"`
	User                 *User       `protobuf:"bytes,8,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ResolveConflictsRequestHeader) Reset()         { *m = ResolveConflictsRequestHeader{} }
func (m *ResolveConflictsRequestHeader) String() string { return proto.CompactTextString(m) }
func (*ResolveConflictsRequestHeader) ProtoMessage()    {}
func (*ResolveConflictsRequestHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_28fc8937e7d75862, []int{4}
}

func (m *ResolveConflictsRequestHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResolveConflictsRequestHeader.Unmarshal(m, b)
}
func (m *ResolveConflictsRequestHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResolveConflictsRequestHeader.Marshal(b, m, deterministic)
}
func (m *ResolveConflictsRequestHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolveConflictsRequestHeader.Merge(m, src)
}
func (m *ResolveConflictsRequestHeader) XXX_Size() int {
	return xxx_messageInfo_ResolveConflictsRequestHeader.Size(m)
}
func (m *ResolveConflictsRequestHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolveConflictsRequestHeader.DiscardUnknown(m)
}

var xxx_messageInfo_ResolveConflictsRequestHeader proto.InternalMessageInfo

func (m *ResolveConflictsRequestHeader) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *ResolveConflictsRequestHeader) GetOurCommitOid() string {
	if m != nil {
		return m.OurCommitOid
	}
	return ""
}

func (m *ResolveConflictsRequestHeader) GetTargetRepository() *Repository {
	if m != nil {
		return m.TargetRepository
	}
	return nil
}

func (m *ResolveConflictsRequestHeader) GetTheirCommitOid() string {
	if m != nil {
		return m.TheirCommitOid
	}
	return ""
}

func (m *ResolveConflictsRequestHeader) GetSourceBranch() []byte {
	if m != nil {
		return m.SourceBranch
	}
	return nil
}

func (m *ResolveConflictsRequestHeader) GetTargetBranch() []byte {
	if m != nil {
		return m.TargetBranch
	}
	return nil
}

func (m *ResolveConflictsRequestHeader) GetCommitMessage() []byte {
	if m != nil {
		return m.CommitMessage
	}
	return nil
}

func (m *ResolveConflictsRequestHeader) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type ResolveConflictsRequest struct {
	// Types that are valid to be assigned to ResolveConflictsRequestPayload:
	//	*ResolveConflictsRequest_Header
	//	*ResolveConflictsRequest_FilesJson
	ResolveConflictsRequestPayload isResolveConflictsRequest_ResolveConflictsRequestPayload `protobuf_oneof:"resolve_conflicts_request_payload"`
	XXX_NoUnkeyedLiteral           struct{}                                                 `json:"-"`
	XXX_unrecognized               []byte                                                   `json:"-"`
	XXX_sizecache                  int32                                                    `json:"-"`
}

func (m *ResolveConflictsRequest) Reset()         { *m = ResolveConflictsRequest{} }
func (m *ResolveConflictsRequest) String() string { return proto.CompactTextString(m) }
func (*ResolveConflictsRequest) ProtoMessage()    {}
func (*ResolveConflictsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_28fc8937e7d75862, []int{5}
}

func (m *ResolveConflictsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResolveConflictsRequest.Unmarshal(m, b)
}
func (m *ResolveConflictsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResolveConflictsRequest.Marshal(b, m, deterministic)
}
func (m *ResolveConflictsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolveConflictsRequest.Merge(m, src)
}
func (m *ResolveConflictsRequest) XXX_Size() int {
	return xxx_messageInfo_ResolveConflictsRequest.Size(m)
}
func (m *ResolveConflictsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolveConflictsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResolveConflictsRequest proto.InternalMessageInfo

type isResolveConflictsRequest_ResolveConflictsRequestPayload interface {
	isResolveConflictsRequest_ResolveConflictsRequestPayload()
}

type ResolveConflictsRequest_Header struct {
	Header *ResolveConflictsRequestHeader `protobuf:"bytes,1,opt,name=header,proto3,oneof"`
}

type ResolveConflictsRequest_FilesJson struct {
	FilesJson []byte `protobuf:"bytes,2,opt,name=files_json,json=filesJson,proto3,oneof"`
}

func (*ResolveConflictsRequest_Header) isResolveConflictsRequest_ResolveConflictsRequestPayload() {}

func (*ResolveConflictsRequest_FilesJson) isResolveConflictsRequest_ResolveConflictsRequestPayload() {}

func (m *ResolveConflictsRequest) GetResolveConflictsRequestPayload() isResolveConflictsRequest_ResolveConflictsRequestPayload {
	if m != nil {
		return m.ResolveConflictsRequestPayload
	}
	return nil
}

func (m *ResolveConflictsRequest) GetHeader() *ResolveConflictsRequestHeader {
	if x, ok := m.GetResolveConflictsRequestPayload().(*ResolveConflictsRequest_Header); ok {
		return x.Header
	}
	return nil
}

func (m *ResolveConflictsRequest) GetFilesJson() []byte {
	if x, ok := m.GetResolveConflictsRequestPayload().(*ResolveConflictsRequest_FilesJson); ok {
		return x.FilesJson
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ResolveConflictsRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ResolveConflictsRequest_Header)(nil),
		(*ResolveConflictsRequest_FilesJson)(nil),
	}
}

type ResolveConflictsResponse struct {
	ResolutionError      string   `protobuf:"bytes,1,opt,name=resolution_error,json=resolutionError,proto3" json:"resolution_error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResolveConflictsResponse) Reset()         { *m = ResolveConflictsResponse{} }
func (m *ResolveConflictsResponse) String() string { return proto.CompactTextString(m) }
func (*ResolveConflictsResponse) ProtoMessage()    {}
func (*ResolveConflictsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_28fc8937e7d75862, []int{6}
}

func (m *ResolveConflictsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResolveConflictsResponse.Unmarshal(m, b)
}
func (m *ResolveConflictsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResolveConflictsResponse.Marshal(b, m, deterministic)
}
func (m *ResolveConflictsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolveConflictsResponse.Merge(m, src)
}
func (m *ResolveConflictsResponse) XXX_Size() int {
	return xxx_messageInfo_ResolveConflictsResponse.Size(m)
}
func (m *ResolveConflictsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolveConflictsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResolveConflictsResponse proto.InternalMessageInfo

func (m *ResolveConflictsResponse) GetResolutionError() string {
	if m != nil {
		return m.ResolutionError
	}
	return ""
}

func init() {
	proto.RegisterType((*ListConflictFilesRequest)(nil), "gitaly.ListConflictFilesRequest")
	proto.RegisterType((*ConflictFileHeader)(nil), "gitaly.ConflictFileHeader")
	proto.RegisterType((*ConflictFile)(nil), "gitaly.ConflictFile")
	proto.RegisterType((*ListConflictFilesResponse)(nil), "gitaly.ListConflictFilesResponse")
	proto.RegisterType((*ResolveConflictsRequestHeader)(nil), "gitaly.ResolveConflictsRequestHeader")
	proto.RegisterType((*ResolveConflictsRequest)(nil), "gitaly.ResolveConflictsRequest")
	proto.RegisterType((*ResolveConflictsResponse)(nil), "gitaly.ResolveConflictsResponse")
}

func init() { proto.RegisterFile("conflicts.proto", fileDescriptor_28fc8937e7d75862) }

var fileDescriptor_28fc8937e7d75862 = []byte{
	// 625 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x4d, 0x4f, 0xdb, 0x40,
	0x10, 0x65, 0xf3, 0x9d, 0xc1, 0x40, 0x58, 0xb5, 0xc2, 0x44, 0x42, 0x18, 0x53, 0x24, 0xb7, 0x52,
	0x13, 0x48, 0x7b, 0x47, 0x0a, 0xa2, 0x45, 0xa8, 0xa8, 0x95, 0xab, 0x5e, 0x7a, 0xb1, 0x1c, 0x7b,
	0x48, 0x5c, 0x39, 0xde, 0x74, 0x77, 0x8d, 0x94, 0x3f, 0xd1, 0x2b, 0xb7, 0xaa, 0xff, 0xac, 0x3f,
	0xa3, 0x12, 0xa7, 0x2a, 0xbb, 0xb6, 0x09, 0x24, 0xa1, 0xa7, 0xde, 0x92, 0x37, 0xcf, 0x6f, 0xde,
	0xcc, 0x3c, 0x2d, 0x6c, 0x05, 0x2c, 0xb9, 0x8e, 0xa3, 0x40, 0x8a, 0xce, 0x84, 0x33, 0xc9, 0x68,
	0x6d, 0x18, 0x49, 0x3f, 0x9e, 0xb6, 0x0d, 0x31, 0xf2, 0x39, 0x86, 0x1a, 0xb5, 0x7f, 0x12, 0x30,
	0x3f, 0x44, 0x42, 0x9e, 0x65, 0xec, 0x77, 0x51, 0x8c, 0xc2, 0xc5, 0xef, 0x29, 0x0a, 0x49, 0x7b,
	0x00, 0x1c, 0x27, 0x4c, 0x44, 0x92, 0xf1, 0xa9, 0x49, 0x2c, 0xe2, 0xac, 0xf7, 0x68, 0x47, 0xeb,
	0x74, 0xdc, 0xa2, 0xe2, 0xce, 0xb1, 0xe8, 0x0b, 0xd8, 0x64, 0x29, 0xf7, 0x02, 0x36, 0x1e, 0x47,
	0xd2, 0x63, 0x51, 0x68, 0x96, 0x2c, 0xe2, 0x34, 0x5d, 0x83, 0xa5, 0xfc, 0x4c, 0x81, 0x1f, 0xa3,
	0x90, 0x3a, 0xd0, 0x92, 0x23, 0x8c, 0x1e, 0xf0, 0xca, 0x8a, 0xb7, 0xa9, 0xf0, 0x82, 0x69, 0xff,
	0x20, 0x40, 0xe7, 0xcd, 0x5d, 0xa0, 0x1f, 0x22, 0xa7, 0x7b, 0x00, 0x0b, 0x2d, 0x9a, 0x41, 0xa1,
	0xbf, 0x07, 0xa0, 0xf5, 0x27, 0xbe, 0x1c, 0x29, 0x65, 0xc3, 0x6d, 0x2a, 0xe4, 0x93, 0x2f, 0x47,
	0x74, 0x17, 0x1a, 0x33, 0x93, 0xaa, 0x58, 0x51, 0xc5, 0x3a, 0x4b, 0x1f, 0x94, 0xc6, 0x2c, 0x44,
	0xb3, 0x6a, 0x11, 0xa7, 0xaa, 0x4a, 0x57, 0x2c, 0xc4, 0xcb, 0x4a, 0x83, 0xb4, 0x4a, 0xf6, 0x14,
	0x8c, 0x79, 0x3f, 0xf4, 0x2d, 0xd4, 0x46, 0xca, 0x53, 0xb6, 0xa0, 0x76, 0xbe, 0xa0, 0x45, 0xd7,
	0x17, 0x6b, 0x6e, 0xc6, 0xa5, 0x6d, 0xa8, 0x07, 0x2c, 0x91, 0x98, 0x48, 0x65, 0xde, 0xb8, 0x58,
	0x73, 0x73, 0xa0, 0xbf, 0x03, 0xcf, 0xf3, 0xe3, 0x79, 0xd7, 0x51, 0x8c, 0xde, 0xc4, 0x9f, 0xc6,
	0xcc, 0x0f, 0xed, 0xf7, 0xb0, 0xbb, 0xe4, 0x56, 0x62, 0xc2, 0x12, 0x81, 0xf4, 0x15, 0x54, 0x67,
	0x64, 0x61, 0x12, 0xab, 0xec, 0xac, 0xf7, 0x9e, 0x2d, 0xb3, 0xe1, 0x6a, 0x8a, 0xfd, 0xa7, 0x04,
	0x7b, 0x2e, 0x0a, 0x16, 0xdf, 0x60, 0x5e, 0xce, 0x8f, 0x9e, 0xed, 0xf7, 0xff, 0x9d, 0xfe, 0x14,
	0xb6, 0xa5, 0xcf, 0x87, 0x28, 0xbd, 0xb9, 0x06, 0xe5, 0x95, 0x0d, 0x5a, 0x9a, 0x7c, 0x8f, 0x2c,
	0xcd, 0x4e, 0x65, 0x59, 0x76, 0xe8, 0x21, 0x6c, 0x08, 0x96, 0xf2, 0x00, 0xbd, 0x01, 0xf7, 0x93,
	0x60, 0xa4, 0x0e, 0x6a, 0xb8, 0x86, 0x06, 0xfb, 0x0a, 0x9b, 0x91, 0x32, 0x3f, 0x19, 0xa9, 0xa6,
	0x49, 0x1a, 0xcc, 0x48, 0x47, 0xb0, 0x99, 0x75, 0x1b, 0xa3, 0x10, 0xfe, 0x10, 0xcd, 0xba, 0x62,
	0x6d, 0x68, 0xf4, 0x4a, 0x83, 0xd4, 0x82, 0x4a, 0x2a, 0x90, 0x9b, 0x0d, 0x35, 0x8e, 0x91, 0x8f,
	0xf3, 0x45, 0x20, 0x77, 0x55, 0xc5, 0xfe, 0x45, 0x60, 0x67, 0xc5, 0xe6, 0xe9, 0xe9, 0xa3, 0x24,
	0x1d, 0xdd, 0xaf, 0xe3, 0x89, 0x53, 0xcd, 0x85, 0x6a, 0x1f, 0x40, 0xdd, 0xd7, 0xfb, 0x26, 0x58,
	0x52, 0xe4, 0xaa, 0xa9, 0xb0, 0x4b, 0xc1, 0x92, 0xfe, 0x21, 0x1c, 0x70, 0xad, 0xe5, 0x15, 0xcf,
	0x83, 0xc7, 0xb5, 0x5a, 0x91, 0xb2, 0x73, 0x30, 0x17, 0x1b, 0x66, 0x21, 0x7b, 0x09, 0x2d, 0x25,
	0x90, 0xca, 0x88, 0x25, 0x1e, 0x72, 0xce, 0xb4, 0xd9, 0xa6, 0xbb, 0x75, 0x8f, 0x9f, 0xcf, 0xe0,
	0xde, 0x6f, 0x02, 0xad, 0x42, 0xe0, 0x33, 0xf2, 0x9b, 0x28, 0x40, 0x8a, 0xb0, 0xbd, 0x90, 0x60,
	0x6a, 0xe5, 0x73, 0xae, 0x7a, 0x88, 0xda, 0x07, 0x4f, 0x30, 0xb4, 0x33, 0xbb, 0x79, 0x77, 0xeb,
	0x54, 0x1b, 0xa5, 0x36, 0x39, 0x39, 0x26, 0x34, 0x84, 0xd6, 0xe3, 0x11, 0xe8, 0xfe, 0x3f, 0xb6,
	0xd9, 0xb6, 0x56, 0x13, 0xb2, 0x1e, 0xeb, 0x77, 0xb7, 0x4e, 0xbd, 0x41, 0xda, 0xe5, 0x93, 0xce,
	0x89, 0x43, 0xfa, 0xc7, 0x5f, 0x67, 0x5f, 0xc4, 0xfe, 0xa0, 0x13, 0xb0, 0x71, 0x57, 0xff, 0x7c,
	0xcd, 0xf8, 0xb0, 0xab, 0x75, 0xba, 0xea, 0x85, 0xed, 0x0e, 0x59, 0xf6, 0x7f, 0x32, 0x18, 0xd4,
	0x14, 0xf4, 0xe6, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x52, 0xab, 0xf8, 0x46, 0x9d, 0x05, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConflictsServiceClient is the client API for ConflictsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConflictsServiceClient interface {
	ListConflictFiles(ctx context.Context, in *ListConflictFilesRequest, opts ...grpc.CallOption) (ConflictsService_ListConflictFilesClient, error)
	ResolveConflicts(ctx context.Context, opts ...grpc.CallOption) (ConflictsService_ResolveConflictsClient, error)
}

type conflictsServiceClient struct {
	cc *grpc.ClientConn
}

func NewConflictsServiceClient(cc *grpc.ClientConn) ConflictsServiceClient {
	return &conflictsServiceClient{cc}
}

func (c *conflictsServiceClient) ListConflictFiles(ctx context.Context, in *ListConflictFilesRequest, opts ...grpc.CallOption) (ConflictsService_ListConflictFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ConflictsService_serviceDesc.Streams[0], "/gitaly.ConflictsService/ListConflictFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &conflictsServiceListConflictFilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConflictsService_ListConflictFilesClient interface {
	Recv() (*ListConflictFilesResponse, error)
	grpc.ClientStream
}

type conflictsServiceListConflictFilesClient struct {
	grpc.ClientStream
}

func (x *conflictsServiceListConflictFilesClient) Recv() (*ListConflictFilesResponse, error) {
	m := new(ListConflictFilesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *conflictsServiceClient) ResolveConflicts(ctx context.Context, opts ...grpc.CallOption) (ConflictsService_ResolveConflictsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ConflictsService_serviceDesc.Streams[1], "/gitaly.ConflictsService/ResolveConflicts", opts...)
	if err != nil {
		return nil, err
	}
	x := &conflictsServiceResolveConflictsClient{stream}
	return x, nil
}

type ConflictsService_ResolveConflictsClient interface {
	Send(*ResolveConflictsRequest) error
	CloseAndRecv() (*ResolveConflictsResponse, error)
	grpc.ClientStream
}

type conflictsServiceResolveConflictsClient struct {
	grpc.ClientStream
}

func (x *conflictsServiceResolveConflictsClient) Send(m *ResolveConflictsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *conflictsServiceResolveConflictsClient) CloseAndRecv() (*ResolveConflictsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ResolveConflictsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConflictsServiceServer is the server API for ConflictsService service.
type ConflictsServiceServer interface {
	ListConflictFiles(*ListConflictFilesRequest, ConflictsService_ListConflictFilesServer) error
	ResolveConflicts(ConflictsService_ResolveConflictsServer) error
}

// UnimplementedConflictsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedConflictsServiceServer struct {
}

func (*UnimplementedConflictsServiceServer) ListConflictFiles(req *ListConflictFilesRequest, srv ConflictsService_ListConflictFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListConflictFiles not implemented")
}
func (*UnimplementedConflictsServiceServer) ResolveConflicts(srv ConflictsService_ResolveConflictsServer) error {
	return status.Errorf(codes.Unimplemented, "method ResolveConflicts not implemented")
}

func RegisterConflictsServiceServer(s *grpc.Server, srv ConflictsServiceServer) {
	s.RegisterService(&_ConflictsService_serviceDesc, srv)
}

func _ConflictsService_ListConflictFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListConflictFilesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConflictsServiceServer).ListConflictFiles(m, &conflictsServiceListConflictFilesServer{stream})
}

type ConflictsService_ListConflictFilesServer interface {
	Send(*ListConflictFilesResponse) error
	grpc.ServerStream
}

type conflictsServiceListConflictFilesServer struct {
	grpc.ServerStream
}

func (x *conflictsServiceListConflictFilesServer) Send(m *ListConflictFilesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConflictsService_ResolveConflicts_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConflictsServiceServer).ResolveConflicts(&conflictsServiceResolveConflictsServer{stream})
}

type ConflictsService_ResolveConflictsServer interface {
	SendAndClose(*ResolveConflictsResponse) error
	Recv() (*ResolveConflictsRequest, error)
	grpc.ServerStream
}

type conflictsServiceResolveConflictsServer struct {
	grpc.ServerStream
}

func (x *conflictsServiceResolveConflictsServer) SendAndClose(m *ResolveConflictsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *conflictsServiceResolveConflictsServer) Recv() (*ResolveConflictsRequest, error) {
	m := new(ResolveConflictsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ConflictsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gitaly.ConflictsService",
	HandlerType: (*ConflictsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListConflictFiles",
			Handler:       _ConflictsService_ListConflictFiles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ResolveConflicts",
			Handler:       _ConflictsService_ResolveConflicts_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "conflicts.proto",
}
