// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.4
// source: go/internal/linter/testdata/invalid.proto

package test

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	gitalypb "gitlab.com/gitlab-org/gitaly/proto/go/gitalypb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type InvalidMethodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InvalidMethodRequest) Reset() {
	*x = InvalidMethodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_internal_linter_testdata_invalid_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidMethodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidMethodRequest) ProtoMessage() {}

func (x *InvalidMethodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_internal_linter_testdata_invalid_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidMethodRequest.ProtoReflect.Descriptor instead.
func (*InvalidMethodRequest) Descriptor() ([]byte, []int) {
	return file_go_internal_linter_testdata_invalid_proto_rawDescGZIP(), []int{0}
}

type InvalidMethodRequestWithRepo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination *gitalypb.Repository `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *InvalidMethodRequestWithRepo) Reset() {
	*x = InvalidMethodRequestWithRepo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_internal_linter_testdata_invalid_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidMethodRequestWithRepo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidMethodRequestWithRepo) ProtoMessage() {}

func (x *InvalidMethodRequestWithRepo) ProtoReflect() protoreflect.Message {
	mi := &file_go_internal_linter_testdata_invalid_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidMethodRequestWithRepo.ProtoReflect.Descriptor instead.
func (*InvalidMethodRequestWithRepo) Descriptor() ([]byte, []int) {
	return file_go_internal_linter_testdata_invalid_proto_rawDescGZIP(), []int{1}
}

func (x *InvalidMethodRequestWithRepo) GetDestination() *gitalypb.Repository {
	if x != nil {
		return x.Destination
	}
	return nil
}

type InvalidTargetType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WrongType int32 `protobuf:"varint,1,opt,name=wrong_type,json=wrongType,proto3" json:"wrong_type,omitempty"`
}

func (x *InvalidTargetType) Reset() {
	*x = InvalidTargetType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_internal_linter_testdata_invalid_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidTargetType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidTargetType) ProtoMessage() {}

func (x *InvalidTargetType) ProtoReflect() protoreflect.Message {
	mi := &file_go_internal_linter_testdata_invalid_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidTargetType.ProtoReflect.Descriptor instead.
func (*InvalidTargetType) Descriptor() ([]byte, []int) {
	return file_go_internal_linter_testdata_invalid_proto_rawDescGZIP(), []int{2}
}

func (x *InvalidTargetType) GetWrongType() int32 {
	if x != nil {
		return x.WrongType
	}
	return 0
}

type InvalidMethodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InvalidMethodResponse) Reset() {
	*x = InvalidMethodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_internal_linter_testdata_invalid_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidMethodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidMethodResponse) ProtoMessage() {}

func (x *InvalidMethodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_internal_linter_testdata_invalid_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidMethodResponse.ProtoReflect.Descriptor instead.
func (*InvalidMethodResponse) Descriptor() ([]byte, []int) {
	return file_go_internal_linter_testdata_invalid_proto_rawDescGZIP(), []int{3}
}

type InvalidNestedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerMessage *InvalidTargetType `protobuf:"bytes,1,opt,name=inner_message,json=innerMessage,proto3" json:"inner_message,omitempty"`
}

func (x *InvalidNestedRequest) Reset() {
	*x = InvalidNestedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_internal_linter_testdata_invalid_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidNestedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidNestedRequest) ProtoMessage() {}

func (x *InvalidNestedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_internal_linter_testdata_invalid_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidNestedRequest.ProtoReflect.Descriptor instead.
func (*InvalidNestedRequest) Descriptor() ([]byte, []int) {
	return file_go_internal_linter_testdata_invalid_proto_rawDescGZIP(), []int{4}
}

func (x *InvalidNestedRequest) GetInnerMessage() *InvalidTargetType {
	if x != nil {
		return x.InnerMessage
	}
	return nil
}

type RequestWithStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageName string               `protobuf:"bytes,1,opt,name=storage_name,json=storageName,proto3" json:"storage_name,omitempty"`
	Destination *gitalypb.Repository `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *RequestWithStorage) Reset() {
	*x = RequestWithStorage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_internal_linter_testdata_invalid_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestWithStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestWithStorage) ProtoMessage() {}

func (x *RequestWithStorage) ProtoReflect() protoreflect.Message {
	mi := &file_go_internal_linter_testdata_invalid_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestWithStorage.ProtoReflect.Descriptor instead.
func (*RequestWithStorage) Descriptor() ([]byte, []int) {
	return file_go_internal_linter_testdata_invalid_proto_rawDescGZIP(), []int{5}
}

func (x *RequestWithStorage) GetStorageName() string {
	if x != nil {
		return x.StorageName
	}
	return ""
}

func (x *RequestWithStorage) GetDestination() *gitalypb.Repository {
	if x != nil {
		return x.Destination
	}
	return nil
}

type RequestWithStorageAndRepo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageName string               `protobuf:"bytes,1,opt,name=storage_name,json=storageName,proto3" json:"storage_name,omitempty"`
	Destination *gitalypb.Repository `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *RequestWithStorageAndRepo) Reset() {
	*x = RequestWithStorageAndRepo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_internal_linter_testdata_invalid_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestWithStorageAndRepo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestWithStorageAndRepo) ProtoMessage() {}

func (x *RequestWithStorageAndRepo) ProtoReflect() protoreflect.Message {
	mi := &file_go_internal_linter_testdata_invalid_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestWithStorageAndRepo.ProtoReflect.Descriptor instead.
func (*RequestWithStorageAndRepo) Descriptor() ([]byte, []int) {
	return file_go_internal_linter_testdata_invalid_proto_rawDescGZIP(), []int{6}
}

func (x *RequestWithStorageAndRepo) GetStorageName() string {
	if x != nil {
		return x.StorageName
	}
	return ""
}

func (x *RequestWithStorageAndRepo) GetDestination() *gitalypb.Repository {
	if x != nil {
		return x.Destination
	}
	return nil
}

type RequestWithNestedStorageAndRepo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerMessage *RequestWithStorageAndRepo `protobuf:"bytes,1,opt,name=inner_message,json=innerMessage,proto3" json:"inner_message,omitempty"`
}

func (x *RequestWithNestedStorageAndRepo) Reset() {
	*x = RequestWithNestedStorageAndRepo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_internal_linter_testdata_invalid_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestWithNestedStorageAndRepo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestWithNestedStorageAndRepo) ProtoMessage() {}

func (x *RequestWithNestedStorageAndRepo) ProtoReflect() protoreflect.Message {
	mi := &file_go_internal_linter_testdata_invalid_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestWithNestedStorageAndRepo.ProtoReflect.Descriptor instead.
func (*RequestWithNestedStorageAndRepo) Descriptor() ([]byte, []int) {
	return file_go_internal_linter_testdata_invalid_proto_rawDescGZIP(), []int{7}
}

func (x *RequestWithNestedStorageAndRepo) GetInnerMessage() *RequestWithStorageAndRepo {
	if x != nil {
		return x.InnerMessage
	}
	return nil
}

type RequestWithMultipleNestedStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerMessage *RequestWithStorage `protobuf:"bytes,1,opt,name=inner_message,json=innerMessage,proto3" json:"inner_message,omitempty"`
	StorageName  string              `protobuf:"bytes,2,opt,name=storage_name,json=storageName,proto3" json:"storage_name,omitempty"`
}

func (x *RequestWithMultipleNestedStorage) Reset() {
	*x = RequestWithMultipleNestedStorage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_internal_linter_testdata_invalid_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestWithMultipleNestedStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestWithMultipleNestedStorage) ProtoMessage() {}

func (x *RequestWithMultipleNestedStorage) ProtoReflect() protoreflect.Message {
	mi := &file_go_internal_linter_testdata_invalid_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestWithMultipleNestedStorage.ProtoReflect.Descriptor instead.
func (*RequestWithMultipleNestedStorage) Descriptor() ([]byte, []int) {
	return file_go_internal_linter_testdata_invalid_proto_rawDescGZIP(), []int{8}
}

func (x *RequestWithMultipleNestedStorage) GetInnerMessage() *RequestWithStorage {
	if x != nil {
		return x.InnerMessage
	}
	return nil
}

func (x *RequestWithMultipleNestedStorage) GetStorageName() string {
	if x != nil {
		return x.StorageName
	}
	return ""
}

type RequestWithInnerNestedStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *RequestWithInnerNestedStorage_Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *RequestWithInnerNestedStorage) Reset() {
	*x = RequestWithInnerNestedStorage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_internal_linter_testdata_invalid_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestWithInnerNestedStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestWithInnerNestedStorage) ProtoMessage() {}

func (x *RequestWithInnerNestedStorage) ProtoReflect() protoreflect.Message {
	mi := &file_go_internal_linter_testdata_invalid_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestWithInnerNestedStorage.ProtoReflect.Descriptor instead.
func (*RequestWithInnerNestedStorage) Descriptor() ([]byte, []int) {
	return file_go_internal_linter_testdata_invalid_proto_rawDescGZIP(), []int{9}
}

func (x *RequestWithInnerNestedStorage) GetHeader() *RequestWithInnerNestedStorage_Header {
	if x != nil {
		return x.Header
	}
	return nil
}

type RequestWithWrongTypeRepository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *RequestWithWrongTypeRepository_Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *RequestWithWrongTypeRepository) Reset() {
	*x = RequestWithWrongTypeRepository{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_internal_linter_testdata_invalid_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestWithWrongTypeRepository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestWithWrongTypeRepository) ProtoMessage() {}

func (x *RequestWithWrongTypeRepository) ProtoReflect() protoreflect.Message {
	mi := &file_go_internal_linter_testdata_invalid_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestWithWrongTypeRepository.ProtoReflect.Descriptor instead.
func (*RequestWithWrongTypeRepository) Descriptor() ([]byte, []int) {
	return file_go_internal_linter_testdata_invalid_proto_rawDescGZIP(), []int{10}
}

func (x *RequestWithWrongTypeRepository) GetHeader() *RequestWithWrongTypeRepository_Header {
	if x != nil {
		return x.Header
	}
	return nil
}

type RequestWithNestedRepoNotFlagged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *RequestWithNestedRepoNotFlagged_Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *RequestWithNestedRepoNotFlagged) Reset() {
	*x = RequestWithNestedRepoNotFlagged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_internal_linter_testdata_invalid_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestWithNestedRepoNotFlagged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestWithNestedRepoNotFlagged) ProtoMessage() {}

func (x *RequestWithNestedRepoNotFlagged) ProtoReflect() protoreflect.Message {
	mi := &file_go_internal_linter_testdata_invalid_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestWithNestedRepoNotFlagged.ProtoReflect.Descriptor instead.
func (*RequestWithNestedRepoNotFlagged) Descriptor() ([]byte, []int) {
	return file_go_internal_linter_testdata_invalid_proto_rawDescGZIP(), []int{11}
}

func (x *RequestWithNestedRepoNotFlagged) GetHeader() *RequestWithNestedRepoNotFlagged_Header {
	if x != nil {
		return x.Header
	}
	return nil
}

type RequestWithInnerNestedStorage_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageName string `protobuf:"bytes,1,opt,name=storage_name,json=storageName,proto3" json:"storage_name,omitempty"`
}

func (x *RequestWithInnerNestedStorage_Header) Reset() {
	*x = RequestWithInnerNestedStorage_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_internal_linter_testdata_invalid_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestWithInnerNestedStorage_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestWithInnerNestedStorage_Header) ProtoMessage() {}

func (x *RequestWithInnerNestedStorage_Header) ProtoReflect() protoreflect.Message {
	mi := &file_go_internal_linter_testdata_invalid_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestWithInnerNestedStorage_Header.ProtoReflect.Descriptor instead.
func (*RequestWithInnerNestedStorage_Header) Descriptor() ([]byte, []int) {
	return file_go_internal_linter_testdata_invalid_proto_rawDescGZIP(), []int{9, 0}
}

func (x *RequestWithInnerNestedStorage_Header) GetStorageName() string {
	if x != nil {
		return x.StorageName
	}
	return ""
}

type RequestWithWrongTypeRepository_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *InvalidMethodResponse `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
}

func (x *RequestWithWrongTypeRepository_Header) Reset() {
	*x = RequestWithWrongTypeRepository_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_internal_linter_testdata_invalid_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestWithWrongTypeRepository_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestWithWrongTypeRepository_Header) ProtoMessage() {}

func (x *RequestWithWrongTypeRepository_Header) ProtoReflect() protoreflect.Message {
	mi := &file_go_internal_linter_testdata_invalid_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestWithWrongTypeRepository_Header.ProtoReflect.Descriptor instead.
func (*RequestWithWrongTypeRepository_Header) Descriptor() ([]byte, []int) {
	return file_go_internal_linter_testdata_invalid_proto_rawDescGZIP(), []int{10, 0}
}

func (x *RequestWithWrongTypeRepository_Header) GetRepository() *InvalidMethodResponse {
	if x != nil {
		return x.Repository
	}
	return nil
}

type RequestWithNestedRepoNotFlagged_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *gitalypb.Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
}

func (x *RequestWithNestedRepoNotFlagged_Header) Reset() {
	*x = RequestWithNestedRepoNotFlagged_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_internal_linter_testdata_invalid_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestWithNestedRepoNotFlagged_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestWithNestedRepoNotFlagged_Header) ProtoMessage() {}

func (x *RequestWithNestedRepoNotFlagged_Header) ProtoReflect() protoreflect.Message {
	mi := &file_go_internal_linter_testdata_invalid_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestWithNestedRepoNotFlagged_Header.ProtoReflect.Descriptor instead.
func (*RequestWithNestedRepoNotFlagged_Header) Descriptor() ([]byte, []int) {
	return file_go_internal_linter_testdata_invalid_proto_rawDescGZIP(), []int{11, 0}
}

func (x *RequestWithNestedRepoNotFlagged_Header) GetRepository() *gitalypb.Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

var File_go_internal_linter_testdata_invalid_proto protoreflect.FileDescriptor

var file_go_internal_linter_testdata_invalid_proto_rawDesc = []byte{
	0x0a, 0x29, 0x67, 0x6f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x6c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x74, 0x65, 0x73,
	0x74, 0x1a, 0x0a, 0x6c, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x16, 0x0a, 0x14, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x1c, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x52,
	0x65, 0x70, 0x6f, 0x12, 0x3a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x04, 0x98, 0xc6,
	0x2c, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x38, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0a, 0x77, 0x72, 0x6f, 0x6e, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0x98, 0xc6, 0x2c, 0x01, 0x52, 0x09,
	0x77, 0x72, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x54, 0x0a, 0x14, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0d, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x73, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x27,
	0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x88, 0xc6, 0x2c, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x80, 0x01,
	0x0a, 0x19, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x27, 0x0a, 0x0c, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0x88, 0xc6, 0x2c, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x04, 0x98,
	0xc6, 0x2c, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x67, 0x0a, 0x1f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x64, 0x52,
	0x65, 0x70, 0x6f, 0x12, 0x44, 0x0a, 0x0d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x0c, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x20, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x3d,
	0x0a, 0x0d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x0c, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a,
	0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0x88, 0xc6, 0x2c, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x6e, 0x65, 0x72,
	0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x1a, 0x31, 0x0a, 0x06,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x88, 0xc6,
	0x2c, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xb8, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x57,
	0x72, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x49, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42,
	0x04, 0x98, 0xc6, 0x2c, 0x01, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x1a, 0x4b, 0x0a,
	0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x04, 0x90, 0xc6, 0x2c, 0x01, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xab, 0x01, 0x0a, 0x1f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x70, 0x6f, 0x4e, 0x6f, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x12, 0x4a,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x4e, 0x6f, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x67, 0x65, 0x64, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x04, 0x98, 0xc6,
	0x2c, 0x01, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x1a, 0x3c, 0x0a, 0x06, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x32, 0x76, 0x0a, 0x1c, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x06, 0xfa, 0x97, 0x28, 0x02, 0x08, 0x02, 0x1a, 0x04, 0xf0, 0x97, 0x28, 0x01,
	0x32, 0xfe, 0x08, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x30, 0x12, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x51, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x31, 0x12, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xfa, 0x97, 0x28,
	0x02, 0x08, 0x00, 0x12, 0x51, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x32, 0x12, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06,
	0xfa, 0x97, 0x28, 0x02, 0x08, 0x02, 0x12, 0x51, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x34, 0x12, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x06, 0xfa, 0x97, 0x28, 0x02, 0x08, 0x01, 0x12, 0x5b, 0x0a, 0x0e, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x35, 0x12, 0x24, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x57, 0x72,
	0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x1a, 0x1b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06,
	0xfa, 0x97, 0x28, 0x02, 0x08, 0x01, 0x12, 0x5c, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x36, 0x12, 0x25, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x70, 0x6f, 0x4e, 0x6f, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x1a,
	0x1b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xfa, 0x97,
	0x28, 0x02, 0x08, 0x01, 0x12, 0x4e, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x37, 0x12, 0x17, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x1a,
	0x1b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xfa, 0x97,
	0x28, 0x02, 0x08, 0x01, 0x12, 0x51, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x38, 0x12, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x06, 0xfa, 0x97, 0x28, 0x02, 0x08, 0x01, 0x12, 0x5b, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x39, 0x12, 0x22, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x1a, 0x1b, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0xfa, 0x97, 0x28, 0x04,
	0x08, 0x01, 0x10, 0x02, 0x12, 0x57, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x31, 0x30, 0x12, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x1a, 0x1b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xfa, 0x97, 0x28, 0x02, 0x08, 0x02, 0x12, 0x5d, 0x0a,
	0x0f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x31, 0x31,
	0x12, 0x25, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x41, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x1a, 0x1b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xfa, 0x97, 0x28, 0x02, 0x08, 0x01, 0x12, 0x51, 0x0a, 0x0f,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x31, 0x33, 0x12,
	0x17, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x1b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0xfa, 0x97, 0x28, 0x04, 0x08, 0x01, 0x10, 0x02, 0x12,
	0x60, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x31, 0x34, 0x12, 0x26, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a, 0x1b, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0xfa, 0x97, 0x28, 0x04, 0x08, 0x01, 0x10,
	0x02, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_go_internal_linter_testdata_invalid_proto_rawDescOnce sync.Once
	file_go_internal_linter_testdata_invalid_proto_rawDescData = file_go_internal_linter_testdata_invalid_proto_rawDesc
)

func file_go_internal_linter_testdata_invalid_proto_rawDescGZIP() []byte {
	file_go_internal_linter_testdata_invalid_proto_rawDescOnce.Do(func() {
		file_go_internal_linter_testdata_invalid_proto_rawDescData = protoimpl.X.CompressGZIP(file_go_internal_linter_testdata_invalid_proto_rawDescData)
	})
	return file_go_internal_linter_testdata_invalid_proto_rawDescData
}

var file_go_internal_linter_testdata_invalid_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_go_internal_linter_testdata_invalid_proto_goTypes = []interface{}{
	(*InvalidMethodRequest)(nil),                   // 0: test.InvalidMethodRequest
	(*InvalidMethodRequestWithRepo)(nil),           // 1: test.InvalidMethodRequestWithRepo
	(*InvalidTargetType)(nil),                      // 2: test.InvalidTargetType
	(*InvalidMethodResponse)(nil),                  // 3: test.InvalidMethodResponse
	(*InvalidNestedRequest)(nil),                   // 4: test.InvalidNestedRequest
	(*RequestWithStorage)(nil),                     // 5: test.RequestWithStorage
	(*RequestWithStorageAndRepo)(nil),              // 6: test.RequestWithStorageAndRepo
	(*RequestWithNestedStorageAndRepo)(nil),        // 7: test.RequestWithNestedStorageAndRepo
	(*RequestWithMultipleNestedStorage)(nil),       // 8: test.RequestWithMultipleNestedStorage
	(*RequestWithInnerNestedStorage)(nil),          // 9: test.RequestWithInnerNestedStorage
	(*RequestWithWrongTypeRepository)(nil),         // 10: test.RequestWithWrongTypeRepository
	(*RequestWithNestedRepoNotFlagged)(nil),        // 11: test.RequestWithNestedRepoNotFlagged
	(*RequestWithInnerNestedStorage_Header)(nil),   // 12: test.RequestWithInnerNestedStorage.Header
	(*RequestWithWrongTypeRepository_Header)(nil),  // 13: test.RequestWithWrongTypeRepository.Header
	(*RequestWithNestedRepoNotFlagged_Header)(nil), // 14: test.RequestWithNestedRepoNotFlagged.Header
	(*gitalypb.Repository)(nil),                    // 15: gitaly.Repository
}
var file_go_internal_linter_testdata_invalid_proto_depIdxs = []int32{
	15, // 0: test.InvalidMethodRequestWithRepo.destination:type_name -> gitaly.Repository
	2,  // 1: test.InvalidNestedRequest.inner_message:type_name -> test.InvalidTargetType
	15, // 2: test.RequestWithStorage.destination:type_name -> gitaly.Repository
	15, // 3: test.RequestWithStorageAndRepo.destination:type_name -> gitaly.Repository
	6,  // 4: test.RequestWithNestedStorageAndRepo.inner_message:type_name -> test.RequestWithStorageAndRepo
	5,  // 5: test.RequestWithMultipleNestedStorage.inner_message:type_name -> test.RequestWithStorage
	12, // 6: test.RequestWithInnerNestedStorage.header:type_name -> test.RequestWithInnerNestedStorage.Header
	13, // 7: test.RequestWithWrongTypeRepository.header:type_name -> test.RequestWithWrongTypeRepository.Header
	14, // 8: test.RequestWithNestedRepoNotFlagged.header:type_name -> test.RequestWithNestedRepoNotFlagged.Header
	3,  // 9: test.RequestWithWrongTypeRepository.Header.repository:type_name -> test.InvalidMethodResponse
	15, // 10: test.RequestWithNestedRepoNotFlagged.Header.repository:type_name -> gitaly.Repository
	0,  // 11: test.InterceptedWithOperationType.InvalidMethod:input_type -> test.InvalidMethodRequest
	0,  // 12: test.InvalidService.InvalidMethod0:input_type -> test.InvalidMethodRequest
	0,  // 13: test.InvalidService.InvalidMethod1:input_type -> test.InvalidMethodRequest
	0,  // 14: test.InvalidService.InvalidMethod2:input_type -> test.InvalidMethodRequest
	0,  // 15: test.InvalidService.InvalidMethod4:input_type -> test.InvalidMethodRequest
	10, // 16: test.InvalidService.InvalidMethod5:input_type -> test.RequestWithWrongTypeRepository
	11, // 17: test.InvalidService.InvalidMethod6:input_type -> test.RequestWithNestedRepoNotFlagged
	2,  // 18: test.InvalidService.InvalidMethod7:input_type -> test.InvalidTargetType
	4,  // 19: test.InvalidService.InvalidMethod8:input_type -> test.InvalidNestedRequest
	1,  // 20: test.InvalidService.InvalidMethod9:input_type -> test.InvalidMethodRequestWithRepo
	6,  // 21: test.InvalidService.InvalidMethod10:input_type -> test.RequestWithStorageAndRepo
	7,  // 22: test.InvalidService.InvalidMethod11:input_type -> test.RequestWithNestedStorageAndRepo
	2,  // 23: test.InvalidService.InvalidMethod13:input_type -> test.InvalidTargetType
	8,  // 24: test.InvalidService.InvalidMethod14:input_type -> test.RequestWithMultipleNestedStorage
	3,  // 25: test.InterceptedWithOperationType.InvalidMethod:output_type -> test.InvalidMethodResponse
	3,  // 26: test.InvalidService.InvalidMethod0:output_type -> test.InvalidMethodResponse
	3,  // 27: test.InvalidService.InvalidMethod1:output_type -> test.InvalidMethodResponse
	3,  // 28: test.InvalidService.InvalidMethod2:output_type -> test.InvalidMethodResponse
	3,  // 29: test.InvalidService.InvalidMethod4:output_type -> test.InvalidMethodResponse
	3,  // 30: test.InvalidService.InvalidMethod5:output_type -> test.InvalidMethodResponse
	3,  // 31: test.InvalidService.InvalidMethod6:output_type -> test.InvalidMethodResponse
	3,  // 32: test.InvalidService.InvalidMethod7:output_type -> test.InvalidMethodResponse
	3,  // 33: test.InvalidService.InvalidMethod8:output_type -> test.InvalidMethodResponse
	3,  // 34: test.InvalidService.InvalidMethod9:output_type -> test.InvalidMethodResponse
	3,  // 35: test.InvalidService.InvalidMethod10:output_type -> test.InvalidMethodResponse
	3,  // 36: test.InvalidService.InvalidMethod11:output_type -> test.InvalidMethodResponse
	3,  // 37: test.InvalidService.InvalidMethod13:output_type -> test.InvalidMethodResponse
	3,  // 38: test.InvalidService.InvalidMethod14:output_type -> test.InvalidMethodResponse
	25, // [25:39] is the sub-list for method output_type
	11, // [11:25] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_go_internal_linter_testdata_invalid_proto_init() }
func file_go_internal_linter_testdata_invalid_proto_init() {
	if File_go_internal_linter_testdata_invalid_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_go_internal_linter_testdata_invalid_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidMethodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_internal_linter_testdata_invalid_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidMethodRequestWithRepo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_internal_linter_testdata_invalid_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidTargetType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_internal_linter_testdata_invalid_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidMethodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_internal_linter_testdata_invalid_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidNestedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_internal_linter_testdata_invalid_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestWithStorage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_internal_linter_testdata_invalid_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestWithStorageAndRepo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_internal_linter_testdata_invalid_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestWithNestedStorageAndRepo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_internal_linter_testdata_invalid_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestWithMultipleNestedStorage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_internal_linter_testdata_invalid_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestWithInnerNestedStorage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_internal_linter_testdata_invalid_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestWithWrongTypeRepository); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_internal_linter_testdata_invalid_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestWithNestedRepoNotFlagged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_internal_linter_testdata_invalid_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestWithInnerNestedStorage_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_internal_linter_testdata_invalid_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestWithWrongTypeRepository_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_internal_linter_testdata_invalid_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestWithNestedRepoNotFlagged_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_go_internal_linter_testdata_invalid_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_go_internal_linter_testdata_invalid_proto_goTypes,
		DependencyIndexes: file_go_internal_linter_testdata_invalid_proto_depIdxs,
		MessageInfos:      file_go_internal_linter_testdata_invalid_proto_msgTypes,
	}.Build()
	File_go_internal_linter_testdata_invalid_proto = out.File
	file_go_internal_linter_testdata_invalid_proto_rawDesc = nil
	file_go_internal_linter_testdata_invalid_proto_goTypes = nil
	file_go_internal_linter_testdata_invalid_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InterceptedWithOperationTypeClient is the client API for InterceptedWithOperationType service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InterceptedWithOperationTypeClient interface {
	// intercepted services can't have operation type annotations.
	InvalidMethod(ctx context.Context, in *InvalidMethodRequest, opts ...grpc.CallOption) (*InvalidMethodResponse, error)
}

type interceptedWithOperationTypeClient struct {
	cc grpc.ClientConnInterface
}

func NewInterceptedWithOperationTypeClient(cc grpc.ClientConnInterface) InterceptedWithOperationTypeClient {
	return &interceptedWithOperationTypeClient{cc}
}

func (c *interceptedWithOperationTypeClient) InvalidMethod(ctx context.Context, in *InvalidMethodRequest, opts ...grpc.CallOption) (*InvalidMethodResponse, error) {
	out := new(InvalidMethodResponse)
	err := c.cc.Invoke(ctx, "/test.InterceptedWithOperationType/InvalidMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterceptedWithOperationTypeServer is the server API for InterceptedWithOperationType service.
type InterceptedWithOperationTypeServer interface {
	// intercepted services can't have operation type annotations.
	InvalidMethod(context.Context, *InvalidMethodRequest) (*InvalidMethodResponse, error)
}

// UnimplementedInterceptedWithOperationTypeServer can be embedded to have forward compatible implementations.
type UnimplementedInterceptedWithOperationTypeServer struct {
}

func (*UnimplementedInterceptedWithOperationTypeServer) InvalidMethod(context.Context, *InvalidMethodRequest) (*InvalidMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidMethod not implemented")
}

func RegisterInterceptedWithOperationTypeServer(s *grpc.Server, srv InterceptedWithOperationTypeServer) {
	s.RegisterService(&_InterceptedWithOperationType_serviceDesc, srv)
}

func _InterceptedWithOperationType_InvalidMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterceptedWithOperationTypeServer).InvalidMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.InterceptedWithOperationType/InvalidMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterceptedWithOperationTypeServer).InvalidMethod(ctx, req.(*InvalidMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InterceptedWithOperationType_serviceDesc = grpc.ServiceDesc{
	ServiceName: "test.InterceptedWithOperationType",
	HandlerType: (*InterceptedWithOperationTypeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InvalidMethod",
			Handler:    _InterceptedWithOperationType_InvalidMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go/internal/linter/testdata/invalid.proto",
}

// InvalidServiceClient is the client API for InvalidService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InvalidServiceClient interface {
	// should fail if op_type extension is missing
	InvalidMethod0(ctx context.Context, in *InvalidMethodRequest, opts ...grpc.CallOption) (*InvalidMethodResponse, error)
	// should fail if op type is unknown
	InvalidMethod1(ctx context.Context, in *InvalidMethodRequest, opts ...grpc.CallOption) (*InvalidMethodResponse, error)
	// should fail if target repo is not provided for accessor
	InvalidMethod2(ctx context.Context, in *InvalidMethodRequest, opts ...grpc.CallOption) (*InvalidMethodResponse, error)
	// should fail if missing either target repo or non-repo-scope for mutator
	InvalidMethod4(ctx context.Context, in *InvalidMethodRequest, opts ...grpc.CallOption) (*InvalidMethodResponse, error)
	// should fail if repository is not of type Repository
	InvalidMethod5(ctx context.Context, in *RequestWithWrongTypeRepository, opts ...grpc.CallOption) (*InvalidMethodResponse, error)
	// should fail if nested repository isn't flagged
	InvalidMethod6(ctx context.Context, in *RequestWithNestedRepoNotFlagged, opts ...grpc.CallOption) (*InvalidMethodResponse, error)
	// should fail if target field type is not of type Repository
	InvalidMethod7(ctx context.Context, in *InvalidTargetType, opts ...grpc.CallOption) (*InvalidMethodResponse, error)
	// should fail if nested target field type is not of type Repository
	InvalidMethod8(ctx context.Context, in *InvalidNestedRequest, opts ...grpc.CallOption) (*InvalidMethodResponse, error)
	// should fail if target repo is specified for storage scoped RPC
	InvalidMethod9(ctx context.Context, in *InvalidMethodRequestWithRepo, opts ...grpc.CallOption) (*InvalidMethodResponse, error)
	// should fail if storage is specified for implicit repository scoped RPC
	InvalidMethod10(ctx context.Context, in *RequestWithStorageAndRepo, opts ...grpc.CallOption) (*InvalidMethodResponse, error)
	// should fail if storage is specified for repository scoped RPC
	InvalidMethod11(ctx context.Context, in *RequestWithNestedStorageAndRepo, opts ...grpc.CallOption) (*InvalidMethodResponse, error)
	// should fail if storage isn't specified for storage scoped RPC
	InvalidMethod13(ctx context.Context, in *InvalidTargetType, opts ...grpc.CallOption) (*InvalidMethodResponse, error)
	// should fail if multiple storage is specified for storage scoped RPC
	InvalidMethod14(ctx context.Context, in *RequestWithMultipleNestedStorage, opts ...grpc.CallOption) (*InvalidMethodResponse, error)
}

type invalidServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvalidServiceClient(cc grpc.ClientConnInterface) InvalidServiceClient {
	return &invalidServiceClient{cc}
}

func (c *invalidServiceClient) InvalidMethod0(ctx context.Context, in *InvalidMethodRequest, opts ...grpc.CallOption) (*InvalidMethodResponse, error) {
	out := new(InvalidMethodResponse)
	err := c.cc.Invoke(ctx, "/test.InvalidService/InvalidMethod0", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invalidServiceClient) InvalidMethod1(ctx context.Context, in *InvalidMethodRequest, opts ...grpc.CallOption) (*InvalidMethodResponse, error) {
	out := new(InvalidMethodResponse)
	err := c.cc.Invoke(ctx, "/test.InvalidService/InvalidMethod1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invalidServiceClient) InvalidMethod2(ctx context.Context, in *InvalidMethodRequest, opts ...grpc.CallOption) (*InvalidMethodResponse, error) {
	out := new(InvalidMethodResponse)
	err := c.cc.Invoke(ctx, "/test.InvalidService/InvalidMethod2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invalidServiceClient) InvalidMethod4(ctx context.Context, in *InvalidMethodRequest, opts ...grpc.CallOption) (*InvalidMethodResponse, error) {
	out := new(InvalidMethodResponse)
	err := c.cc.Invoke(ctx, "/test.InvalidService/InvalidMethod4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invalidServiceClient) InvalidMethod5(ctx context.Context, in *RequestWithWrongTypeRepository, opts ...grpc.CallOption) (*InvalidMethodResponse, error) {
	out := new(InvalidMethodResponse)
	err := c.cc.Invoke(ctx, "/test.InvalidService/InvalidMethod5", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invalidServiceClient) InvalidMethod6(ctx context.Context, in *RequestWithNestedRepoNotFlagged, opts ...grpc.CallOption) (*InvalidMethodResponse, error) {
	out := new(InvalidMethodResponse)
	err := c.cc.Invoke(ctx, "/test.InvalidService/InvalidMethod6", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invalidServiceClient) InvalidMethod7(ctx context.Context, in *InvalidTargetType, opts ...grpc.CallOption) (*InvalidMethodResponse, error) {
	out := new(InvalidMethodResponse)
	err := c.cc.Invoke(ctx, "/test.InvalidService/InvalidMethod7", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invalidServiceClient) InvalidMethod8(ctx context.Context, in *InvalidNestedRequest, opts ...grpc.CallOption) (*InvalidMethodResponse, error) {
	out := new(InvalidMethodResponse)
	err := c.cc.Invoke(ctx, "/test.InvalidService/InvalidMethod8", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invalidServiceClient) InvalidMethod9(ctx context.Context, in *InvalidMethodRequestWithRepo, opts ...grpc.CallOption) (*InvalidMethodResponse, error) {
	out := new(InvalidMethodResponse)
	err := c.cc.Invoke(ctx, "/test.InvalidService/InvalidMethod9", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invalidServiceClient) InvalidMethod10(ctx context.Context, in *RequestWithStorageAndRepo, opts ...grpc.CallOption) (*InvalidMethodResponse, error) {
	out := new(InvalidMethodResponse)
	err := c.cc.Invoke(ctx, "/test.InvalidService/InvalidMethod10", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invalidServiceClient) InvalidMethod11(ctx context.Context, in *RequestWithNestedStorageAndRepo, opts ...grpc.CallOption) (*InvalidMethodResponse, error) {
	out := new(InvalidMethodResponse)
	err := c.cc.Invoke(ctx, "/test.InvalidService/InvalidMethod11", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invalidServiceClient) InvalidMethod13(ctx context.Context, in *InvalidTargetType, opts ...grpc.CallOption) (*InvalidMethodResponse, error) {
	out := new(InvalidMethodResponse)
	err := c.cc.Invoke(ctx, "/test.InvalidService/InvalidMethod13", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invalidServiceClient) InvalidMethod14(ctx context.Context, in *RequestWithMultipleNestedStorage, opts ...grpc.CallOption) (*InvalidMethodResponse, error) {
	out := new(InvalidMethodResponse)
	err := c.cc.Invoke(ctx, "/test.InvalidService/InvalidMethod14", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvalidServiceServer is the server API for InvalidService service.
type InvalidServiceServer interface {
	// should fail if op_type extension is missing
	InvalidMethod0(context.Context, *InvalidMethodRequest) (*InvalidMethodResponse, error)
	// should fail if op type is unknown
	InvalidMethod1(context.Context, *InvalidMethodRequest) (*InvalidMethodResponse, error)
	// should fail if target repo is not provided for accessor
	InvalidMethod2(context.Context, *InvalidMethodRequest) (*InvalidMethodResponse, error)
	// should fail if missing either target repo or non-repo-scope for mutator
	InvalidMethod4(context.Context, *InvalidMethodRequest) (*InvalidMethodResponse, error)
	// should fail if repository is not of type Repository
	InvalidMethod5(context.Context, *RequestWithWrongTypeRepository) (*InvalidMethodResponse, error)
	// should fail if nested repository isn't flagged
	InvalidMethod6(context.Context, *RequestWithNestedRepoNotFlagged) (*InvalidMethodResponse, error)
	// should fail if target field type is not of type Repository
	InvalidMethod7(context.Context, *InvalidTargetType) (*InvalidMethodResponse, error)
	// should fail if nested target field type is not of type Repository
	InvalidMethod8(context.Context, *InvalidNestedRequest) (*InvalidMethodResponse, error)
	// should fail if target repo is specified for storage scoped RPC
	InvalidMethod9(context.Context, *InvalidMethodRequestWithRepo) (*InvalidMethodResponse, error)
	// should fail if storage is specified for implicit repository scoped RPC
	InvalidMethod10(context.Context, *RequestWithStorageAndRepo) (*InvalidMethodResponse, error)
	// should fail if storage is specified for repository scoped RPC
	InvalidMethod11(context.Context, *RequestWithNestedStorageAndRepo) (*InvalidMethodResponse, error)
	// should fail if storage isn't specified for storage scoped RPC
	InvalidMethod13(context.Context, *InvalidTargetType) (*InvalidMethodResponse, error)
	// should fail if multiple storage is specified for storage scoped RPC
	InvalidMethod14(context.Context, *RequestWithMultipleNestedStorage) (*InvalidMethodResponse, error)
}

// UnimplementedInvalidServiceServer can be embedded to have forward compatible implementations.
type UnimplementedInvalidServiceServer struct {
}

func (*UnimplementedInvalidServiceServer) InvalidMethod0(context.Context, *InvalidMethodRequest) (*InvalidMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidMethod0 not implemented")
}
func (*UnimplementedInvalidServiceServer) InvalidMethod1(context.Context, *InvalidMethodRequest) (*InvalidMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidMethod1 not implemented")
}
func (*UnimplementedInvalidServiceServer) InvalidMethod2(context.Context, *InvalidMethodRequest) (*InvalidMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidMethod2 not implemented")
}
func (*UnimplementedInvalidServiceServer) InvalidMethod4(context.Context, *InvalidMethodRequest) (*InvalidMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidMethod4 not implemented")
}
func (*UnimplementedInvalidServiceServer) InvalidMethod5(context.Context, *RequestWithWrongTypeRepository) (*InvalidMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidMethod5 not implemented")
}
func (*UnimplementedInvalidServiceServer) InvalidMethod6(context.Context, *RequestWithNestedRepoNotFlagged) (*InvalidMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidMethod6 not implemented")
}
func (*UnimplementedInvalidServiceServer) InvalidMethod7(context.Context, *InvalidTargetType) (*InvalidMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidMethod7 not implemented")
}
func (*UnimplementedInvalidServiceServer) InvalidMethod8(context.Context, *InvalidNestedRequest) (*InvalidMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidMethod8 not implemented")
}
func (*UnimplementedInvalidServiceServer) InvalidMethod9(context.Context, *InvalidMethodRequestWithRepo) (*InvalidMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidMethod9 not implemented")
}
func (*UnimplementedInvalidServiceServer) InvalidMethod10(context.Context, *RequestWithStorageAndRepo) (*InvalidMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidMethod10 not implemented")
}
func (*UnimplementedInvalidServiceServer) InvalidMethod11(context.Context, *RequestWithNestedStorageAndRepo) (*InvalidMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidMethod11 not implemented")
}
func (*UnimplementedInvalidServiceServer) InvalidMethod13(context.Context, *InvalidTargetType) (*InvalidMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidMethod13 not implemented")
}
func (*UnimplementedInvalidServiceServer) InvalidMethod14(context.Context, *RequestWithMultipleNestedStorage) (*InvalidMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidMethod14 not implemented")
}

func RegisterInvalidServiceServer(s *grpc.Server, srv InvalidServiceServer) {
	s.RegisterService(&_InvalidService_serviceDesc, srv)
}

func _InvalidService_InvalidMethod0_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvalidServiceServer).InvalidMethod0(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.InvalidService/InvalidMethod0",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvalidServiceServer).InvalidMethod0(ctx, req.(*InvalidMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvalidService_InvalidMethod1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvalidServiceServer).InvalidMethod1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.InvalidService/InvalidMethod1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvalidServiceServer).InvalidMethod1(ctx, req.(*InvalidMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvalidService_InvalidMethod2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvalidServiceServer).InvalidMethod2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.InvalidService/InvalidMethod2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvalidServiceServer).InvalidMethod2(ctx, req.(*InvalidMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvalidService_InvalidMethod4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvalidServiceServer).InvalidMethod4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.InvalidService/InvalidMethod4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvalidServiceServer).InvalidMethod4(ctx, req.(*InvalidMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvalidService_InvalidMethod5_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWithWrongTypeRepository)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvalidServiceServer).InvalidMethod5(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.InvalidService/InvalidMethod5",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvalidServiceServer).InvalidMethod5(ctx, req.(*RequestWithWrongTypeRepository))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvalidService_InvalidMethod6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWithNestedRepoNotFlagged)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvalidServiceServer).InvalidMethod6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.InvalidService/InvalidMethod6",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvalidServiceServer).InvalidMethod6(ctx, req.(*RequestWithNestedRepoNotFlagged))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvalidService_InvalidMethod7_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidTargetType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvalidServiceServer).InvalidMethod7(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.InvalidService/InvalidMethod7",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvalidServiceServer).InvalidMethod7(ctx, req.(*InvalidTargetType))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvalidService_InvalidMethod8_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidNestedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvalidServiceServer).InvalidMethod8(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.InvalidService/InvalidMethod8",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvalidServiceServer).InvalidMethod8(ctx, req.(*InvalidNestedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvalidService_InvalidMethod9_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidMethodRequestWithRepo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvalidServiceServer).InvalidMethod9(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.InvalidService/InvalidMethod9",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvalidServiceServer).InvalidMethod9(ctx, req.(*InvalidMethodRequestWithRepo))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvalidService_InvalidMethod10_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWithStorageAndRepo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvalidServiceServer).InvalidMethod10(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.InvalidService/InvalidMethod10",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvalidServiceServer).InvalidMethod10(ctx, req.(*RequestWithStorageAndRepo))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvalidService_InvalidMethod11_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWithNestedStorageAndRepo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvalidServiceServer).InvalidMethod11(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.InvalidService/InvalidMethod11",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvalidServiceServer).InvalidMethod11(ctx, req.(*RequestWithNestedStorageAndRepo))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvalidService_InvalidMethod13_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidTargetType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvalidServiceServer).InvalidMethod13(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.InvalidService/InvalidMethod13",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvalidServiceServer).InvalidMethod13(ctx, req.(*InvalidTargetType))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvalidService_InvalidMethod14_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWithMultipleNestedStorage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvalidServiceServer).InvalidMethod14(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.InvalidService/InvalidMethod14",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvalidServiceServer).InvalidMethod14(ctx, req.(*RequestWithMultipleNestedStorage))
	}
	return interceptor(ctx, in, info, handler)
}

var _InvalidService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "test.InvalidService",
	HandlerType: (*InvalidServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InvalidMethod0",
			Handler:    _InvalidService_InvalidMethod0_Handler,
		},
		{
			MethodName: "InvalidMethod1",
			Handler:    _InvalidService_InvalidMethod1_Handler,
		},
		{
			MethodName: "InvalidMethod2",
			Handler:    _InvalidService_InvalidMethod2_Handler,
		},
		{
			MethodName: "InvalidMethod4",
			Handler:    _InvalidService_InvalidMethod4_Handler,
		},
		{
			MethodName: "InvalidMethod5",
			Handler:    _InvalidService_InvalidMethod5_Handler,
		},
		{
			MethodName: "InvalidMethod6",
			Handler:    _InvalidService_InvalidMethod6_Handler,
		},
		{
			MethodName: "InvalidMethod7",
			Handler:    _InvalidService_InvalidMethod7_Handler,
		},
		{
			MethodName: "InvalidMethod8",
			Handler:    _InvalidService_InvalidMethod8_Handler,
		},
		{
			MethodName: "InvalidMethod9",
			Handler:    _InvalidService_InvalidMethod9_Handler,
		},
		{
			MethodName: "InvalidMethod10",
			Handler:    _InvalidService_InvalidMethod10_Handler,
		},
		{
			MethodName: "InvalidMethod11",
			Handler:    _InvalidService_InvalidMethod11_Handler,
		},
		{
			MethodName: "InvalidMethod13",
			Handler:    _InvalidService_InvalidMethod13_Handler,
		},
		{
			MethodName: "InvalidMethod14",
			Handler:    _InvalidService_InvalidMethod14_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go/internal/linter/testdata/invalid.proto",
}
