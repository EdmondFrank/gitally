// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.4
// source: middleware/cache/testdata/stream.proto

package testdata

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	gitalypb "gitlab.com/gitlab-org/gitaly/proto/go/gitalypb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination *gitalypb.Repository `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_middleware_cache_testdata_stream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_middleware_cache_testdata_stream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_middleware_cache_testdata_stream_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetDestination() *gitalypb.Repository {
	if x != nil {
		return x.Destination
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_middleware_cache_testdata_stream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_middleware_cache_testdata_stream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_middleware_cache_testdata_stream_proto_rawDescGZIP(), []int{1}
}

var File_middleware_cache_testdata_stream_proto protoreflect.FileDescriptor

var file_middleware_cache_testdata_stream_proto_rawDesc = []byte{
	0x0a, 0x26, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x0a, 0x6c, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x45, 0x0a, 0x07,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x42, 0x04, 0x98, 0xc6, 0x2c, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0x52, 0x0a, 0x12, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x11, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x04, 0xf0,
	0x97, 0x28, 0x01, 0x32, 0xb9, 0x02, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x17, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x11,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xfa, 0x97, 0x28, 0x02, 0x08, 0x01, 0x30, 0x01, 0x12,
	0x4b, 0x0a, 0x18, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x70, 0x6f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x11, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x06, 0xfa, 0x97, 0x28, 0x02, 0x08, 0x02, 0x30, 0x01, 0x12, 0x47, 0x0a, 0x16,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x4d,
	0x75, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x11, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xfa,
	0x97, 0x28, 0x02, 0x08, 0x01, 0x12, 0x48, 0x0a, 0x17, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x12, 0x11, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xfa, 0x97, 0x28, 0x02, 0x08, 0x02, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_middleware_cache_testdata_stream_proto_rawDescOnce sync.Once
	file_middleware_cache_testdata_stream_proto_rawDescData = file_middleware_cache_testdata_stream_proto_rawDesc
)

func file_middleware_cache_testdata_stream_proto_rawDescGZIP() []byte {
	file_middleware_cache_testdata_stream_proto_rawDescOnce.Do(func() {
		file_middleware_cache_testdata_stream_proto_rawDescData = protoimpl.X.CompressGZIP(file_middleware_cache_testdata_stream_proto_rawDescData)
	})
	return file_middleware_cache_testdata_stream_proto_rawDescData
}

var file_middleware_cache_testdata_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_middleware_cache_testdata_stream_proto_goTypes = []interface{}{
	(*Request)(nil),             // 0: testdata.Request
	(*Response)(nil),            // 1: testdata.Response
	(*gitalypb.Repository)(nil), // 2: gitaly.Repository
}
var file_middleware_cache_testdata_stream_proto_depIdxs = []int32{
	2, // 0: testdata.Request.destination:type_name -> gitaly.Repository
	0, // 1: testdata.InterceptedService.IgnoredMethod:input_type -> testdata.Request
	0, // 2: testdata.TestService.ClientStreamRepoMutator:input_type -> testdata.Request
	0, // 3: testdata.TestService.ClientStreamRepoAccessor:input_type -> testdata.Request
	0, // 4: testdata.TestService.ClientUnaryRepoMutator:input_type -> testdata.Request
	0, // 5: testdata.TestService.ClientUnaryRepoAccessor:input_type -> testdata.Request
	1, // 6: testdata.InterceptedService.IgnoredMethod:output_type -> testdata.Response
	1, // 7: testdata.TestService.ClientStreamRepoMutator:output_type -> testdata.Response
	1, // 8: testdata.TestService.ClientStreamRepoAccessor:output_type -> testdata.Response
	1, // 9: testdata.TestService.ClientUnaryRepoMutator:output_type -> testdata.Response
	1, // 10: testdata.TestService.ClientUnaryRepoAccessor:output_type -> testdata.Response
	6, // [6:11] is the sub-list for method output_type
	1, // [1:6] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_middleware_cache_testdata_stream_proto_init() }
func file_middleware_cache_testdata_stream_proto_init() {
	if File_middleware_cache_testdata_stream_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_middleware_cache_testdata_stream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_middleware_cache_testdata_stream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_middleware_cache_testdata_stream_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_middleware_cache_testdata_stream_proto_goTypes,
		DependencyIndexes: file_middleware_cache_testdata_stream_proto_depIdxs,
		MessageInfos:      file_middleware_cache_testdata_stream_proto_msgTypes,
	}.Build()
	File_middleware_cache_testdata_stream_proto = out.File
	file_middleware_cache_testdata_stream_proto_rawDesc = nil
	file_middleware_cache_testdata_stream_proto_goTypes = nil
	file_middleware_cache_testdata_stream_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InterceptedServiceClient is the client API for InterceptedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InterceptedServiceClient interface {
	IgnoredMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type interceptedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterceptedServiceClient(cc grpc.ClientConnInterface) InterceptedServiceClient {
	return &interceptedServiceClient{cc}
}

func (c *interceptedServiceClient) IgnoredMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/testdata.InterceptedService/IgnoredMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterceptedServiceServer is the server API for InterceptedService service.
type InterceptedServiceServer interface {
	IgnoredMethod(context.Context, *Request) (*Response, error)
}

// UnimplementedInterceptedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedInterceptedServiceServer struct {
}

func (*UnimplementedInterceptedServiceServer) IgnoredMethod(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IgnoredMethod not implemented")
}

func RegisterInterceptedServiceServer(s *grpc.Server, srv InterceptedServiceServer) {
	s.RegisterService(&_InterceptedService_serviceDesc, srv)
}

func _InterceptedService_IgnoredMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterceptedServiceServer).IgnoredMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.InterceptedService/IgnoredMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterceptedServiceServer).IgnoredMethod(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _InterceptedService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testdata.InterceptedService",
	HandlerType: (*InterceptedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IgnoredMethod",
			Handler:    _InterceptedService_IgnoredMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "middleware/cache/testdata/stream.proto",
}

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestServiceClient interface {
	ClientStreamRepoMutator(ctx context.Context, in *Request, opts ...grpc.CallOption) (TestService_ClientStreamRepoMutatorClient, error)
	ClientStreamRepoAccessor(ctx context.Context, in *Request, opts ...grpc.CallOption) (TestService_ClientStreamRepoAccessorClient, error)
	ClientUnaryRepoMutator(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ClientUnaryRepoAccessor(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type testServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServiceClient(cc grpc.ClientConnInterface) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) ClientStreamRepoMutator(ctx context.Context, in *Request, opts ...grpc.CallOption) (TestService_ClientStreamRepoMutatorClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestService_serviceDesc.Streams[0], "/testdata.TestService/ClientStreamRepoMutator", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceClientStreamRepoMutatorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestService_ClientStreamRepoMutatorClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type testServiceClientStreamRepoMutatorClient struct {
	grpc.ClientStream
}

func (x *testServiceClientStreamRepoMutatorClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) ClientStreamRepoAccessor(ctx context.Context, in *Request, opts ...grpc.CallOption) (TestService_ClientStreamRepoAccessorClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestService_serviceDesc.Streams[1], "/testdata.TestService/ClientStreamRepoAccessor", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceClientStreamRepoAccessorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestService_ClientStreamRepoAccessorClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type testServiceClientStreamRepoAccessorClient struct {
	grpc.ClientStream
}

func (x *testServiceClientStreamRepoAccessorClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) ClientUnaryRepoMutator(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/testdata.TestService/ClientUnaryRepoMutator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) ClientUnaryRepoAccessor(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/testdata.TestService/ClientUnaryRepoAccessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestServiceServer is the server API for TestService service.
type TestServiceServer interface {
	ClientStreamRepoMutator(*Request, TestService_ClientStreamRepoMutatorServer) error
	ClientStreamRepoAccessor(*Request, TestService_ClientStreamRepoAccessorServer) error
	ClientUnaryRepoMutator(context.Context, *Request) (*Response, error)
	ClientUnaryRepoAccessor(context.Context, *Request) (*Response, error)
}

// UnimplementedTestServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTestServiceServer struct {
}

func (*UnimplementedTestServiceServer) ClientStreamRepoMutator(*Request, TestService_ClientStreamRepoMutatorServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamRepoMutator not implemented")
}
func (*UnimplementedTestServiceServer) ClientStreamRepoAccessor(*Request, TestService_ClientStreamRepoAccessorServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamRepoAccessor not implemented")
}
func (*UnimplementedTestServiceServer) ClientUnaryRepoMutator(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientUnaryRepoMutator not implemented")
}
func (*UnimplementedTestServiceServer) ClientUnaryRepoAccessor(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientUnaryRepoAccessor not implemented")
}

func RegisterTestServiceServer(s *grpc.Server, srv TestServiceServer) {
	s.RegisterService(&_TestService_serviceDesc, srv)
}

func _TestService_ClientStreamRepoMutator_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServiceServer).ClientStreamRepoMutator(m, &testServiceClientStreamRepoMutatorServer{stream})
}

type TestService_ClientStreamRepoMutatorServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type testServiceClientStreamRepoMutatorServer struct {
	grpc.ServerStream
}

func (x *testServiceClientStreamRepoMutatorServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _TestService_ClientStreamRepoAccessor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServiceServer).ClientStreamRepoAccessor(m, &testServiceClientStreamRepoAccessorServer{stream})
}

type TestService_ClientStreamRepoAccessorServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type testServiceClientStreamRepoAccessorServer struct {
	grpc.ServerStream
}

func (x *testServiceClientStreamRepoAccessorServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _TestService_ClientUnaryRepoMutator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).ClientUnaryRepoMutator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.TestService/ClientUnaryRepoMutator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).ClientUnaryRepoMutator(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_ClientUnaryRepoAccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).ClientUnaryRepoAccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.TestService/ClientUnaryRepoAccessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).ClientUnaryRepoAccessor(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testdata.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientUnaryRepoMutator",
			Handler:    _TestService_ClientUnaryRepoMutator_Handler,
		},
		{
			MethodName: "ClientUnaryRepoAccessor",
			Handler:    _TestService_ClientUnaryRepoAccessor_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStreamRepoMutator",
			Handler:       _TestService_ClientStreamRepoMutator_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamRepoAccessor",
			Handler:       _TestService_ClientStreamRepoAccessor_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "middleware/cache/testdata/stream.proto",
}
