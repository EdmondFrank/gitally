// Code generated by protoc-gen-go. DO NOT EDIT.
// source: praefect/mock/mock.proto

package mock

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	gitalypb "gitlab.com/gitlab-org/gitaly/proto/go/gitalypb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SimpleRequest struct {
	Value                int32    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleRequest) Reset()         { *m = SimpleRequest{} }
func (m *SimpleRequest) String() string { return proto.CompactTextString(m) }
func (*SimpleRequest) ProtoMessage()    {}
func (*SimpleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d20d83172fd49eb0, []int{0}
}

func (m *SimpleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleRequest.Unmarshal(m, b)
}
func (m *SimpleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleRequest.Marshal(b, m, deterministic)
}
func (m *SimpleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleRequest.Merge(m, src)
}
func (m *SimpleRequest) XXX_Size() int {
	return xxx_messageInfo_SimpleRequest.Size(m)
}
func (m *SimpleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleRequest proto.InternalMessageInfo

func (m *SimpleRequest) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type SimpleResponse struct {
	Value                int32    `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleResponse) Reset()         { *m = SimpleResponse{} }
func (m *SimpleResponse) String() string { return proto.CompactTextString(m) }
func (*SimpleResponse) ProtoMessage()    {}
func (*SimpleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d20d83172fd49eb0, []int{1}
}

func (m *SimpleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleResponse.Unmarshal(m, b)
}
func (m *SimpleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleResponse.Marshal(b, m, deterministic)
}
func (m *SimpleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleResponse.Merge(m, src)
}
func (m *SimpleResponse) XXX_Size() int {
	return xxx_messageInfo_SimpleResponse.Size(m)
}
func (m *SimpleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleResponse proto.InternalMessageInfo

func (m *SimpleResponse) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type RepoRequest struct {
	Repo                 *gitalypb.Repository `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RepoRequest) Reset()         { *m = RepoRequest{} }
func (m *RepoRequest) String() string { return proto.CompactTextString(m) }
func (*RepoRequest) ProtoMessage()    {}
func (*RepoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d20d83172fd49eb0, []int{2}
}

func (m *RepoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RepoRequest.Unmarshal(m, b)
}
func (m *RepoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RepoRequest.Marshal(b, m, deterministic)
}
func (m *RepoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepoRequest.Merge(m, src)
}
func (m *RepoRequest) XXX_Size() int {
	return xxx_messageInfo_RepoRequest.Size(m)
}
func (m *RepoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RepoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RepoRequest proto.InternalMessageInfo

func (m *RepoRequest) GetRepo() *gitalypb.Repository {
	if m != nil {
		return m.Repo
	}
	return nil
}

func init() {
	proto.RegisterType((*SimpleRequest)(nil), "mock.SimpleRequest")
	proto.RegisterType((*SimpleResponse)(nil), "mock.SimpleResponse")
	proto.RegisterType((*RepoRequest)(nil), "mock.RepoRequest")
}

func init() { proto.RegisterFile("praefect/mock/mock.proto", fileDescriptor_d20d83172fd49eb0) }

var fileDescriptor_d20d83172fd49eb0 = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0xc1, 0x4a, 0xc3, 0x30,
	0x1c, 0xc6, 0x49, 0xe9, 0xc6, 0xc8, 0x74, 0x6c, 0x71, 0xc8, 0xa8, 0x17, 0x29, 0x28, 0x3d, 0x8c,
	0x14, 0xe6, 0xd1, 0x93, 0x42, 0xbd, 0x79, 0xe9, 0xf0, 0x01, 0xb2, 0xfa, 0x5f, 0x2d, 0xb6, 0x4d,
	0x4c, 0xd2, 0x41, 0x9f, 0x64, 0x3e, 0x91, 0x6f, 0xe2, 0x4b, 0xec, 0x24, 0x49, 0x0c, 0x6e, 0x57,
	0x2f, 0xe5, 0xff, 0xff, 0xfa, 0xcb, 0x97, 0x2f, 0x1f, 0x5e, 0x08, 0xc9, 0x60, 0x0b, 0x85, 0x4e,
	0x1b, 0x5e, 0xbc, 0xdb, 0x0f, 0x15, 0x92, 0x6b, 0x4e, 0x42, 0x33, 0x47, 0x67, 0xea, 0x8d, 0x49,
	0x78, 0x75, 0x5a, 0x84, 0xeb, 0xaa, 0xd5, 0xbf, 0xf3, 0x55, 0xc9, 0x79, 0x59, 0x43, 0x6a, 0xb7,
	0x4d, 0xb7, 0x4d, 0xa1, 0x11, 0xba, 0x77, 0x3f, 0xe3, 0x1b, 0x7c, 0xbe, 0xae, 0x1a, 0x51, 0x43,
	0x0e, 0x1f, 0x1d, 0x28, 0x4d, 0xe6, 0x78, 0xb0, 0x63, 0x75, 0x07, 0x0b, 0x74, 0x8d, 0x92, 0x41,
	0xee, 0x96, 0xf8, 0x16, 0x4f, 0x3c, 0xa6, 0x04, 0x6f, 0x15, 0xfc, 0x71, 0xc1, 0x31, 0x77, 0x8f,
	0xc7, 0x39, 0x08, 0xee, 0xcd, 0x96, 0x38, 0x94, 0x20, 0xb8, 0xf5, 0x1a, 0xaf, 0x08, 0x2d, 0x2b,
	0xcd, 0xea, 0x9e, 0x1a, 0x44, 0x55, 0x9a, 0xcb, 0xfe, 0x31, 0xfc, 0xfc, 0x5a, 0xa2, 0xdc, 0x52,
	0xab, 0x6f, 0xe4, 0xc3, 0xac, 0x41, 0xee, 0xaa, 0x02, 0x48, 0x86, 0x27, 0x66, 0x04, 0xf9, 0x50,
	0x14, 0xa0, 0x14, 0x97, 0xe4, 0x82, 0xda, 0x97, 0x9f, 0x64, 0x8e, 0xe6, 0xa7, 0xa2, 0x4b, 0x18,
	0x8f, 0x0e, 0xfb, 0x24, 0x1c, 0x05, 0x53, 0x44, 0x9e, 0xf0, 0xcc, 0x5c, 0xe9, 0x4d, 0x5e, 0x5a,
	0x26, 0x7b, 0x32, 0x73, 0x87, 0x8e, 0xe2, 0x46, 0x97, 0xd4, 0x55, 0x45, 0x7d, 0x55, 0x34, 0x33,
	0x55, 0xc5, 0xc3, 0xc3, 0x3e, 0x09, 0x46, 0x01, 0xc9, 0xf0, 0xd4, 0xe0, 0xcf, 0x9d, 0x66, 0xfa,
	0xdf, 0x36, 0x68, 0x33, 0xb4, 0xfa, 0xdd, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6c, 0xd2, 0xcb,
	0x4b, 0xd3, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SimpleServiceClient is the client API for SimpleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SimpleServiceClient interface {
	// ServerAccessor is a unary RPC that accesses a server
	ServerAccessor(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	// RepoAccessorUnary is a unary RPC that accesses a repo
	RepoAccessorUnary(ctx context.Context, in *RepoRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// RepoMutatorUnary is a unary RPC that mutates a repo
	RepoMutatorUnary(ctx context.Context, in *RepoRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type simpleServiceClient struct {
	cc *grpc.ClientConn
}

func NewSimpleServiceClient(cc *grpc.ClientConn) SimpleServiceClient {
	return &simpleServiceClient{cc}
}

func (c *simpleServiceClient) ServerAccessor(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/mock.SimpleService/ServerAccessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) RepoAccessorUnary(ctx context.Context, in *RepoRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/mock.SimpleService/RepoAccessorUnary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) RepoMutatorUnary(ctx context.Context, in *RepoRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/mock.SimpleService/RepoMutatorUnary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimpleServiceServer is the server API for SimpleService service.
type SimpleServiceServer interface {
	// ServerAccessor is a unary RPC that accesses a server
	ServerAccessor(context.Context, *SimpleRequest) (*SimpleResponse, error)
	// RepoAccessorUnary is a unary RPC that accesses a repo
	RepoAccessorUnary(context.Context, *RepoRequest) (*empty.Empty, error)
	// RepoMutatorUnary is a unary RPC that mutates a repo
	RepoMutatorUnary(context.Context, *RepoRequest) (*empty.Empty, error)
}

// UnimplementedSimpleServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSimpleServiceServer struct {
}

func (*UnimplementedSimpleServiceServer) ServerAccessor(ctx context.Context, req *SimpleRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerAccessor not implemented")
}
func (*UnimplementedSimpleServiceServer) RepoAccessorUnary(ctx context.Context, req *RepoRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepoAccessorUnary not implemented")
}
func (*UnimplementedSimpleServiceServer) RepoMutatorUnary(ctx context.Context, req *RepoRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepoMutatorUnary not implemented")
}

func RegisterSimpleServiceServer(s *grpc.Server, srv SimpleServiceServer) {
	s.RegisterService(&_SimpleService_serviceDesc, srv)
}

func _SimpleService_ServerAccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServiceServer).ServerAccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mock.SimpleService/ServerAccessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServiceServer).ServerAccessor(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleService_RepoAccessorUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServiceServer).RepoAccessorUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mock.SimpleService/RepoAccessorUnary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServiceServer).RepoAccessorUnary(ctx, req.(*RepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleService_RepoMutatorUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServiceServer).RepoMutatorUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mock.SimpleService/RepoMutatorUnary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServiceServer).RepoMutatorUnary(ctx, req.(*RepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SimpleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mock.SimpleService",
	HandlerType: (*SimpleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServerAccessor",
			Handler:    _SimpleService_ServerAccessor_Handler,
		},
		{
			MethodName: "RepoAccessorUnary",
			Handler:    _SimpleService_RepoAccessorUnary_Handler,
		},
		{
			MethodName: "RepoMutatorUnary",
			Handler:    _SimpleService_RepoMutatorUnary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "praefect/mock/mock.proto",
}
