// Code generated by protoc-gen-go. DO NOT EDIT.
// source: blob.proto

/*
Package gitaly is a generated protocol buffer package.

It is generated from these files:
	blob.proto
	commit.proto
	diff.proto
	notifications.proto
	ref.proto
	shared.proto
	smarthttp.proto
	ssh.proto

It has these top-level messages:
	BlobFromCommitRequest
	BlobFromCommitResponse
	CommitIsAncestorRequest
	CommitIsAncestorResponse
	CommitDiffRequest
	CommitDiffResponse
	CommitDeltaRequest
	CommitDelta
	CommitDeltaResponse
	PostReceiveRequest
	PostReceiveResponse
	FindDefaultBranchNameRequest
	FindDefaultBranchNameResponse
	FindAllBranchNamesRequest
	FindAllBranchNamesResponse
	FindAllTagNamesRequest
	FindAllTagNamesResponse
	FindRefNameRequest
	FindRefNameResponse
	FindLocalBranchesRequest
	FindLocalBranchesResponse
	FindLocalBranchResponse
	FindLocalBranchCommitAuthor
	Repository
	ExitStatus
	InfoRefsRequest
	InfoRefsResponse
	PostUploadPackRequest
	PostUploadPackResponse
	PostReceivePackRequest
	PostReceivePackResponse
	SSHUploadPackRequest
	SSHUploadPackResponse
	SSHReceivePackRequest
	SSHReceivePackResponse
*/
package gitaly

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BlobFromCommitRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	CommitId   string      `protobuf:"bytes,2,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
	Path       []byte      `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Limit      int32       `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
}

func (m *BlobFromCommitRequest) Reset()                    { *m = BlobFromCommitRequest{} }
func (m *BlobFromCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*BlobFromCommitRequest) ProtoMessage()               {}
func (*BlobFromCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BlobFromCommitRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *BlobFromCommitRequest) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *BlobFromCommitRequest) GetPath() []byte {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *BlobFromCommitRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type BlobFromCommitResponse struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Blob  []byte `protobuf:"bytes,2,opt,name=blob,proto3" json:"blob,omitempty"`
	Size  int32  `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	Found bool   `protobuf:"varint,4,opt,name=found" json:"found,omitempty"`
}

func (m *BlobFromCommitResponse) Reset()                    { *m = BlobFromCommitResponse{} }
func (m *BlobFromCommitResponse) String() string            { return proto.CompactTextString(m) }
func (*BlobFromCommitResponse) ProtoMessage()               {}
func (*BlobFromCommitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BlobFromCommitResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BlobFromCommitResponse) GetBlob() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

func (m *BlobFromCommitResponse) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *BlobFromCommitResponse) GetFound() bool {
	if m != nil {
		return m.Found
	}
	return false
}

func init() {
	proto.RegisterType((*BlobFromCommitRequest)(nil), "gitaly.BlobFromCommitRequest")
	proto.RegisterType((*BlobFromCommitResponse)(nil), "gitaly.BlobFromCommitResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Blob service

type BlobClient interface {
	BlobFromCommit(ctx context.Context, in *BlobFromCommitRequest, opts ...grpc.CallOption) (Blob_BlobFromCommitClient, error)
}

type blobClient struct {
	cc *grpc.ClientConn
}

func NewBlobClient(cc *grpc.ClientConn) BlobClient {
	return &blobClient{cc}
}

func (c *blobClient) BlobFromCommit(ctx context.Context, in *BlobFromCommitRequest, opts ...grpc.CallOption) (Blob_BlobFromCommitClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Blob_serviceDesc.Streams[0], c.cc, "/gitaly.Blob/BlobFromCommit", opts...)
	if err != nil {
		return nil, err
	}
	x := &blobBlobFromCommitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Blob_BlobFromCommitClient interface {
	Recv() (*BlobFromCommitResponse, error)
	grpc.ClientStream
}

type blobBlobFromCommitClient struct {
	grpc.ClientStream
}

func (x *blobBlobFromCommitClient) Recv() (*BlobFromCommitResponse, error) {
	m := new(BlobFromCommitResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Blob service

type BlobServer interface {
	BlobFromCommit(*BlobFromCommitRequest, Blob_BlobFromCommitServer) error
}

func RegisterBlobServer(s *grpc.Server, srv BlobServer) {
	s.RegisterService(&_Blob_serviceDesc, srv)
}

func _Blob_BlobFromCommit_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlobFromCommitRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlobServer).BlobFromCommit(m, &blobBlobFromCommitServer{stream})
}

type Blob_BlobFromCommitServer interface {
	Send(*BlobFromCommitResponse) error
	grpc.ServerStream
}

type blobBlobFromCommitServer struct {
	grpc.ServerStream
}

func (x *blobBlobFromCommitServer) Send(m *BlobFromCommitResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Blob_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gitaly.Blob",
	HandlerType: (*BlobServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BlobFromCommit",
			Handler:       _Blob_BlobFromCommit_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "blob.proto",
}

func init() { proto.RegisterFile("blob.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xc1, 0x4a, 0xf4, 0x40,
	0x10, 0x84, 0xff, 0xc9, 0x9f, 0x2c, 0x9b, 0x36, 0xec, 0xa1, 0x51, 0x09, 0x2b, 0x4a, 0xc8, 0x29,
	0xa7, 0x20, 0xf1, 0x0d, 0x14, 0x04, 0xaf, 0xed, 0xd1, 0x83, 0x24, 0x66, 0xd6, 0x1d, 0x48, 0xb6,
	0xe3, 0xcc, 0xec, 0x61, 0x7d, 0x0c, 0x9f, 0x58, 0xd2, 0x83, 0xa2, 0xa2, 0xb7, 0x9a, 0xea, 0xa1,
	0xbe, 0xea, 0x06, 0xe8, 0x06, 0xee, 0xea, 0xc9, 0xb2, 0x67, 0x5c, 0x3c, 0x1b, 0xdf, 0x0e, 0x87,
	0x75, 0xe6, 0xb6, 0xad, 0xd5, 0x7d, 0x70, 0xcb, 0x37, 0x05, 0x27, 0xd7, 0x03, 0x77, 0xb7, 0x96,
	0xc7, 0x1b, 0x1e, 0x47, 0xe3, 0x49, 0xbf, 0xec, 0xb5, 0xf3, 0xd8, 0x00, 0x58, 0x3d, 0xb1, 0x33,
	0x9e, 0xed, 0x21, 0x57, 0x85, 0xaa, 0x8e, 0x1a, 0xac, 0x43, 0x48, 0x4d, 0x9f, 0x13, 0xfa, 0xf2,
	0x0b, 0xcf, 0x20, 0x7d, 0x92, 0x90, 0x47, 0xd3, 0xe7, 0x51, 0xa1, 0xaa, 0x94, 0x96, 0xc1, 0xb8,
	0xeb, 0x11, 0x21, 0x9e, 0x5a, 0xbf, 0xcd, 0xff, 0x17, 0xaa, 0xca, 0x48, 0x34, 0x1e, 0x43, 0x32,
	0x98, 0xd1, 0xf8, 0x3c, 0x2e, 0x54, 0x95, 0x50, 0x78, 0x94, 0x1b, 0x38, 0xfd, 0xd9, 0xc9, 0x4d,
	0xbc, 0x73, 0x1a, 0x57, 0x10, 0x99, 0x5e, 0xca, 0xa4, 0x14, 0x19, 0xc9, 0x9c, 0x57, 0x14, 0x56,
	0x46, 0xa2, 0x67, 0xcf, 0x99, 0x57, 0x2d, 0x9c, 0x84, 0x44, 0xcf, 0x9c, 0x0d, 0xef, 0x77, 0xbd,
	0x70, 0x96, 0x14, 0x1e, 0xcd, 0x03, 0xc4, 0x33, 0x07, 0xef, 0x61, 0xf5, 0x9d, 0x87, 0xe7, 0x1f,
	0x8b, 0xfe, 0x7a, 0x9b, 0xf5, 0xc5, 0x5f, 0xe3, 0x50, 0xb3, 0xfc, 0x77, 0xa9, 0xba, 0x85, 0x1c,
	0xf8, 0xea, 0x3d, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x0b, 0x70, 0x98, 0x84, 0x01, 0x00, 0x00,
}
