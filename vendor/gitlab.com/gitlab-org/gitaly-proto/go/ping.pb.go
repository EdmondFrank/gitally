// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ping.proto

package gitaly

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PingRequest struct {
	ClientTime *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=client_time,json=clientTime" json:"client_time,omitempty"`
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *PingRequest) GetClientTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.ClientTime
	}
	return nil
}

type PingResponse struct {
	ClientTime *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=client_time,json=clientTime" json:"client_time,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *PingResponse) GetClientTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.ClientTime
	}
	return nil
}

func init() {
	proto.RegisterType((*PingRequest)(nil), "gitaly.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "gitaly.PingResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PingService service

type PingServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	PingServerStream(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (PingService_PingServerStreamClient, error)
	PingClientStream(ctx context.Context, opts ...grpc.CallOption) (PingService_PingClientStreamClient, error)
	PingBidiStream(ctx context.Context, opts ...grpc.CallOption) (PingService_PingBidiStreamClient, error)
}

type pingServiceClient struct {
	cc *grpc.ClientConn
}

func NewPingServiceClient(cc *grpc.ClientConn) PingServiceClient {
	return &pingServiceClient{cc}
}

func (c *pingServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/gitaly.PingService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingServiceClient) PingServerStream(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (PingService_PingServerStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PingService_serviceDesc.Streams[0], c.cc, "/gitaly.PingService/PingServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingServicePingServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PingService_PingServerStreamClient interface {
	Recv() (*PingResponse, error)
	grpc.ClientStream
}

type pingServicePingServerStreamClient struct {
	grpc.ClientStream
}

func (x *pingServicePingServerStreamClient) Recv() (*PingResponse, error) {
	m := new(PingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pingServiceClient) PingClientStream(ctx context.Context, opts ...grpc.CallOption) (PingService_PingClientStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PingService_serviceDesc.Streams[1], c.cc, "/gitaly.PingService/PingClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingServicePingClientStreamClient{stream}
	return x, nil
}

type PingService_PingClientStreamClient interface {
	Send(*PingRequest) error
	CloseAndRecv() (*PingResponse, error)
	grpc.ClientStream
}

type pingServicePingClientStreamClient struct {
	grpc.ClientStream
}

func (x *pingServicePingClientStreamClient) Send(m *PingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pingServicePingClientStreamClient) CloseAndRecv() (*PingResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pingServiceClient) PingBidiStream(ctx context.Context, opts ...grpc.CallOption) (PingService_PingBidiStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PingService_serviceDesc.Streams[2], c.cc, "/gitaly.PingService/PingBidiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingServicePingBidiStreamClient{stream}
	return x, nil
}

type PingService_PingBidiStreamClient interface {
	Send(*PingRequest) error
	Recv() (*PingResponse, error)
	grpc.ClientStream
}

type pingServicePingBidiStreamClient struct {
	grpc.ClientStream
}

func (x *pingServicePingBidiStreamClient) Send(m *PingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pingServicePingBidiStreamClient) Recv() (*PingResponse, error) {
	m := new(PingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PingService service

type PingServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	PingServerStream(*PingRequest, PingService_PingServerStreamServer) error
	PingClientStream(PingService_PingClientStreamServer) error
	PingBidiStream(PingService_PingBidiStreamServer) error
}

func RegisterPingServiceServer(s *grpc.Server, srv PingServiceServer) {
	s.RegisterService(&_PingService_serviceDesc, srv)
}

func _PingService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.PingService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PingService_PingServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PingServiceServer).PingServerStream(m, &pingServicePingServerStreamServer{stream})
}

type PingService_PingServerStreamServer interface {
	Send(*PingResponse) error
	grpc.ServerStream
}

type pingServicePingServerStreamServer struct {
	grpc.ServerStream
}

func (x *pingServicePingServerStreamServer) Send(m *PingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PingService_PingClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PingServiceServer).PingClientStream(&pingServicePingClientStreamServer{stream})
}

type PingService_PingClientStreamServer interface {
	SendAndClose(*PingResponse) error
	Recv() (*PingRequest, error)
	grpc.ServerStream
}

type pingServicePingClientStreamServer struct {
	grpc.ServerStream
}

func (x *pingServicePingClientStreamServer) SendAndClose(m *PingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pingServicePingClientStreamServer) Recv() (*PingRequest, error) {
	m := new(PingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PingService_PingBidiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PingServiceServer).PingBidiStream(&pingServicePingBidiStreamServer{stream})
}

type PingService_PingBidiStreamServer interface {
	Send(*PingResponse) error
	Recv() (*PingRequest, error)
	grpc.ServerStream
}

type pingServicePingBidiStreamServer struct {
	grpc.ServerStream
}

func (x *pingServicePingBidiStreamServer) Send(m *PingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pingServicePingBidiStreamServer) Recv() (*PingRequest, error) {
	m := new(PingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gitaly.PingService",
	HandlerType: (*PingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _PingService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PingServerStream",
			Handler:       _PingService_PingServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PingClientStream",
			Handler:       _PingService_PingClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PingBidiStream",
			Handler:       _PingService_PingBidiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ping.proto",
}

func init() { proto.RegisterFile("ping.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0xc8, 0xcc, 0x4b,
	0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4b, 0xcf, 0x2c, 0x49, 0xcc, 0xa9, 0x94, 0x92,
	0x4f, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0x8b, 0x26, 0x95, 0xa6, 0xe9, 0x97, 0x64, 0xe6,
	0xa6, 0x16, 0x97, 0x24, 0xe6, 0x16, 0x40, 0x14, 0x2a, 0x79, 0x71, 0x71, 0x07, 0x64, 0xe6, 0xa5,
	0x07, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x59, 0x73, 0x71, 0x27, 0xe7, 0x64, 0xa6, 0xe6,
	0x95, 0xc4, 0x83, 0x14, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x1b, 0x49, 0xe9, 0x41, 0x4c, 0xd1,
	0x83, 0x99, 0xa2, 0x17, 0x02, 0x33, 0x25, 0x88, 0x0b, 0xa2, 0x1c, 0x24, 0xa0, 0xe4, 0xcd, 0xc5,
	0x03, 0x31, 0xab, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x95, 0x22, 0xc3, 0x8c, 0xba, 0x99, 0x20, 0x2e,
	0x0b, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x15, 0x32, 0xe6, 0x62, 0x01, 0x71, 0x85, 0x84, 0xf5,
	0x20, 0x5e, 0xd3, 0x43, 0x72, 0xb6, 0x94, 0x08, 0xaa, 0x20, 0xc4, 0x7e, 0x25, 0x06, 0x21, 0x47,
	0x2e, 0x01, 0x98, 0x19, 0xa9, 0x45, 0xc1, 0x25, 0x45, 0xa9, 0x89, 0xb9, 0x24, 0x19, 0x60, 0xc0,
	0x08, 0x33, 0xc2, 0x19, 0xec, 0x32, 0x32, 0x8c, 0xd0, 0x00, 0x19, 0xc1, 0x07, 0x12, 0x73, 0xca,
	0x4c, 0xc9, 0x24, 0xcb, 0x00, 0x03, 0xc6, 0x24, 0x36, 0x70, 0x68, 0x19, 0x03, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x30, 0xb6, 0x9b, 0x01, 0xe4, 0x01, 0x00, 0x00,
}
